


<html>

<head>
<title>CETINet 中国电子技术信息网---综合文章---编程规范与范例(4)</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
</head>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="stylesheet" href="style.css" type="text/css">
<style type="text/css">body         { scrollbar-face-color: 5B9595; scrollbar-shadow-color: ffffff; 
               scrollbar-highlight-color: ffffff; scrollbar-3dlight-color: 
               ffffff; scrollbar-darkshadow-color: ffffff; 
               scrollbar-track-color: ffffff; scrollbar-arrow-color: ffffff }
</style>
</head>

<body bgcolor="#F3F3F3" text="#000000">

<div align="center">
  <table width="750" border="0" height="60" cellspacing="0" cellpadding="0">
    <tr>
      <td width="150">
        <div align="center">
          <img border="0" src="images/myad.gif">
         </div>
      </td>
      <td width="450">
        <div align="center">
         <a href="images/ad2.asp" target="_blank"><img border="0" src="images/ad2.gif"></a>
        </div>
      </td>
      <td width="150">
        <div align="center">
        <a href="images/adsmall.asp" target="_blank"><img border="0" src="images/adsmall.gif"></a>
        </div>
      </td>
    </tr>
  </table>
  <br>
  <table width="750" border="0" cellspacing="0" cellpadding="0" height="20">
    <tr>
      <td width="57" bgcolor="#5B9595" align="center"><font color="#FFFFFF">其他栏目</font></td>
      <td width="57" bgcolor="#D7E3E3" align="center"><a href="../bbs/index.asp" target="_blank">技术论坛</a></td>
      <td width="57" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=1" target="_blank">微控制器</a></td>
      <td width="57" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=2" target="_blank">IC设计</a></td>
      <td bgcolor="#D7E3E3" align="center" width="58"><a href="../t_article/index.asp?topid=3" target="_blank">EDA技术</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=4" target="_blank">电路基础</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=5" target="_blank">电源技术</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=6" target="_blank">通信技术</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=7" target="_blank">测试测量</a></td>
      <td bgcolor="#D7E3E3" align="center" width="58"><a href="../t_article/index.asp?topid=8" target="_blank">综合技术</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=9" target="_blank">编程学堂</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=10" target="_blank">版主专栏</a></td>
      <td bgcolor="#D7E3E3" width="58" align="center"><a href="../download/Default.asp" target="_blank">下载中心</a></td>
    </tr>
  </table>
  <br>
</div>

</body>

<body bgcolor="#F3F3F3" text="#000000">

<div align="center">
  <table width="750" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td>您目前的位置：<a href=index.asp?topid=9>编程学堂</a> - <a href=step.asp?topid=9&topname=编程学堂&typeid=106&typename=综合文章>综合文章</a> - 编程规范与范例(4)</td>       
    </tr>
  </table>
  <table width="750" border="0" cellspacing="0" cellpadding="0" height="250">
    <tr>
      <td width="150" valign="top" bgcolor="#5B9595" height="240">
        <table width="150" border="0" cellspacing="0">
          <tr>
            <td height="20"></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">文章类别：</font></td>
          </tr>
          <tr>
            <td height="20">
              <p align="center"><font color="#F3F3F3">综合文章</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">文章来源：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">未知</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">文章作者：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">未知</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">关 键 字：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">规范</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">今天阅读：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">2</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">总共阅读：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">769</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">加入日期：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">2004-3-20 18:48:33</font></td>
          </tr>
        </table>
        <table width="150" border="0" cellspacing="0">
          <tr>
            <td height="20">
                <font color="#FFFFFF">相关文章：</font>
            </td>
          </tr>
          <tr>
            <td height="20">
              <div align="center">
                <a href=list.asp?indexid=1811><font color='#FFFFFF'>编程规范与范例(6)</font></a><br><a href=list.asp?indexid=1810><font color='#FFFFFF'>编程规范与范例(5)</font></a><br><a href=list.asp?indexid=1808><font color='#FFFFFF'>编程规范与范例(3)</font></a><br><a href=list.asp?indexid=1807><font color='#FFFFFF'>编程规范与范例(2)</font></a><br><a href=list.asp?indexid=1800><font color='#FFFFFF'>编程规范与范例(1)</font></a><br><a href=list.asp?indexid=1479><font color='#FFFFFF'>NUXAS代码风格规范</font></a><br><a href=list.asp?indexid=1461><font color='#FFFFFF'>C语言编程规范</font></a><br><a href=list.asp?indexid=706><font color='#FFFFFF'>电路板最新国际规范导读</font></a><br><a href=list.asp?indexid=633><font color='#FFFFFF'>改进电路设计规程提高可测试性</font></a><br><a href=list.asp?indexid=632><font color='#FFFFFF'>PCB全面质量管理</font></a><br>
              </div>
            </td>
          </tr>
        </table>
        <table width="150" border="0" cellspacing="0">
          <tr>
            <td height="20"></td>
          </tr>
          <tr>
            <td height="20">
              <p align="center"><font color="#FFFFFF">==关于文章版权==</font></td>
          </tr>
		  <tr>
            <td height="20"><font color="#FFFFFF"><br>
              “本站”本站站主原创文章，未经本人（帝国老手/aoe）许可其他媒体一律不得转载。<br><br>
              “本站整理”本站站主根据个人见解及他人经验总结整理的文章，其他媒体转载必须标明出处为我站。<br><br>
              “某单位或个人”全文转载来自网络上的文章，其他媒体转载与我站无关。<br><br>
              “未知”（1）来自网络，由于来源混乱，无从考证作者，其他媒体转载与我站无关。<br><br>
              “未知”（2）其文章也是本站站主原创的，只所以标注“未知”，主要是因为引用文字过多或其他原因。建议其他媒体转载标明出处为我站。<br><br>
              我站版权请标注：“www.cetinet.com”或“中国电子技术信息网”字样。</font></td>
          </tr>
          <tr>
            <td height="20"></td>
          </tr>
		</table>
      </td>
      <td width="600" valign="top" height="240">
        <table width="600" border="0" cellspacing="0" cellpadding="0" height="20">
          <tr>
            <td bgcolor="#5B9595">&nbsp;</td>
          </tr>
        </table>
        <table width="600" border="0" cellspacing="3" cellpadding="0">
          <tr>
            <td height="20" bgcolor="#AECECE">
              <div align="center">
                <font color="#0A52D8"><b>编程规范与范例(4)</b></font>
              </div>
            </td>
          </tr>
          <tr>
            <td width="600">〖文章转载或出处〗≡中国电子技术信息网≡ 网址：www.CETINet.com</td>  
          </tr>
          <tr>
            <td width="600">编程规范与范例(4)<br>
<br>
目&nbsp;&nbsp;录<br>
1&nbsp;排版&nbsp;6<br>
2&nbsp;注释&nbsp;11<br>
3&nbsp;标识符命名&nbsp;18<br>
4&nbsp;可读性&nbsp;20<br>
5&nbsp;变量、结构&nbsp;22<br>
6&nbsp;函数、过程&nbsp;28<br>
7&nbsp;可测性&nbsp;36<br>
8&nbsp;程序效率&nbsp;40<br>
9&nbsp;质量保证&nbsp;44<br>
10&nbsp;代码编辑、编译、审查&nbsp;50<br>
11&nbsp;代码测试、维护&nbsp;52<br>
12&nbsp;宏&nbsp;53<br>
&nbsp;<br>
7&nbsp;可测性<br>
&amp;sup1;&nbsp;7-1：在同一项目组或产品组内，要有一套统一的为集成测试与系统联调准备的调测开关及相应打印函数，并且要有详细的说明。<br>
说明：本规则是针对项目组或产品组的。<br>
&amp;sup1;&nbsp;7-2：在同一项目组或产品组内，调测打印出的信息串的格式要有统一的形式。信息串中至少要有所在模块名（或源文件名）及行号。<br>
说明：统一的调测信息格式便于集成测试。<br>
&amp;sup1;&nbsp;7-3：编程的同时要为单元测试选择恰当的测试点，并仔细构造测试代码、测试用例，同时给出明确的注释说明。测试代码部分应作为（模块中的）一个子模块，以方便测试代码在模块中的安装与拆卸（通过调测开关）。<br>
说明：为单元测试而准备。<br>
&amp;sup1;&nbsp;7-4：在进行集成测试/系统联调之前，要构造好测试环境、测试项目及测试用例，同时仔细分析并优化测试用例，以提高测试效率。<br>
说明：好的测试用例应尽可能模拟出程序所遇到的边界值、各种复杂环境及一些极端情况等。<br>
&amp;sup1;&nbsp;7-5：使用断言来发现软件问题，提高代码可测性。<br>
说明：断言是对某种假设条件进行检查（可理解为若条件成立则无动作，否则应报告），它可以快速发现并定位软件问题，同时对系统错误进行自动报警。断言可以对在系统中隐藏很深，用其它手段极难发现的问题进行定位，从而缩短软件问题定位时间，提高系统的可测性。实际应用时，可根据具体情况灵活地设计断言。<br>
示例：下面是C语言中的一个断言，用宏来设计的。（其中NULL为0L）<br>
#ifdef&nbsp;_EXAM_ASSERT_TEST_&nbsp;&nbsp;//&nbsp;若使用断言测试<br>
<br>
void&nbsp;exam_assert(&nbsp;char&nbsp;*&nbsp;file_name,&nbsp;unsigned&nbsp;int&nbsp;line_no&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;printf(&nbsp;&quot;\n[EXAM]Assert&nbsp;failed:&nbsp;%s,&nbsp;line&nbsp;%u\n&quot;,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_name,&nbsp;line_no&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;abort(&nbsp;);<br>
}<br>
<br>
#define&nbsp;&nbsp;EXAM_ASSERT(&nbsp;condition&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(condition)&nbsp;//&nbsp;若条件成立，则无动作<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL;<br>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;//&nbsp;否则报告<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exam_assert(&nbsp;__FILE__,&nbsp;__LINE__&nbsp;)&nbsp;<br>
<br>
#else&nbsp;&nbsp;//&nbsp;若不使用断言测试<br>
<br>
#define&nbsp;EXAM_ASSERT(condition)&nbsp;&nbsp;NULL&nbsp;<br>
<br>
#endif&nbsp;&nbsp;/*&nbsp;end&nbsp;of&nbsp;ASSERT&nbsp;*/<br>
&amp;sup1;&nbsp;7-6：用断言来检查程序正常运行时不应发生但在调测时有可能发生的非法情况。<br>
&amp;sup1;&nbsp;7-7：不能用断言来检查最终产品肯定会出现且必须处理的错误情况。<br>
说明：断言是用来处理不应该发生的错误情况的，对于可能会发生的且必须处理的情况要写防错程序，而不是断言。如某模块收到其它模块或链路上的消息后，要对消息的合理性进行检查，此过程为正常的错误检查，不能用断言来实现。<br>
&amp;sup1;&nbsp;7-8：对较复杂的断言加上明确的注释。<br>
说明：为复杂的断言加注释，可澄清断言含义并减少不必要的误用。<br>
&amp;sup1;&nbsp;7-9：用断言确认函数的参数。<br>
示例：假设某函数参数中有一个指针，那么使用指针前可对它检查，如下。<br>
int&nbsp;exam_fun(&nbsp;unsigned&nbsp;char&nbsp;*str&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;EXAM_ASSERT(&nbsp;str&nbsp;!=&nbsp;NULL&nbsp;);&nbsp;&nbsp;//&nbsp;用断言检查“假设指针不为空”这个条件<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;//other&nbsp;program&nbsp;code<br>
}<br>
&amp;sup1;&nbsp;7-10：用断言保证没有定义的特性或功能不被使用。<br>
示例：假设某通信模块在设计时，准备提供“无连接”和“连接”&nbsp;这两种业务。但当前的版本中仅实现了“无连接”业务，且在此版本的正式发行版中，用户（上层模块）不应产生“连接”业务的请求，那么在测试时可用断言检查用户是否使用“连接”业务。如下。<br>
#define&nbsp;EXAM_CONNECTIONLESS&nbsp;0&nbsp;//&nbsp;无连接业务<br>
#define&nbsp;EXAM_CONNECTION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;//&nbsp;连接业务<br>
<br>
int&nbsp;msg_process(&nbsp;EXAM_MESSAGE&nbsp;*msg&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;char&nbsp;service;&nbsp;/*&nbsp;message&nbsp;service&nbsp;class&nbsp;*/<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;EXAM_ASSERT(&nbsp;msg&nbsp;!=&nbsp;NULL&nbsp;);<br>
<br>
service&nbsp;=&nbsp;get_msg_service_class(&nbsp;msg&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;EXAM_ASSERT(&nbsp;service&nbsp;!=&nbsp;EXAM_CONNECTION&nbsp;);&nbsp;//&nbsp;假设不使用连接业务<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;//other&nbsp;program&nbsp;code<br>
}<br>
&amp;sup1;&nbsp;7-11：用断言对程序开发环境（OS/Compiler/Hardware）的假设进行检查。<br>
说明：程序运行时所需的软硬件环境及配置要求，不能用断言来检查，而必须由一段专门代码处理。用断言仅可对程序开发环境中的假设及所配置的某版本软硬件是否具有某种功能的假设进行检查。如某网卡是否在系统运行环境中配置了，应由程序中正式代码来检查；而此网卡是否具有某设想的功能，则可由断言来检查。<br>
对编译器提供的功能及特性假设可用断言检查，原因是软件最终产品（即运行代码或机器码）与编译器已没有任何直接关系，即软件运行过程中（注意不是编译过程中）不会也不应该对编译器的功能提出任何需求。<br>
示例：用断言检查编译器的int型数据占用的内存空间是否为2，如下。<br>
EXAM_ASSERT(&nbsp;sizeof(&nbsp;int&nbsp;)&nbsp;==&nbsp;2&nbsp;);<br>
&amp;sup1;&nbsp;7-12：正式软件产品中应把断言及其它调测代码去掉（即把有关的调测开关关掉）。<br>
说明：加快软件运行速度。<br>
&amp;sup1;&nbsp;7-13：在软件系统中设置与取消有关测试手段，不能对软件实现的功能等产生影响。<br>
说明：即有测试代码的软件和关掉测试代码的软件，在功能行为上应一致。<br>
&amp;sup1;&nbsp;7-14：用调测开关来切换软件的DEBUG版和正式版，而不要同时存在正式版本和DEBUG版本的不同源文件，以减少维护的难度。<br>
&amp;sup1;&nbsp;7-15：软件的DEBUG版本和发行版本应该统一维护，不允许分家，并且要时刻注意保证两个版本在实现功能上的一致性。<br>
&amp;frac12;&nbsp;7-1：在编写代码之前，应预先设计好程序调试与测试的方法和手段，并设计好各种调测开关及相应测试代码如打印函数等。<br>
说明：程序的调试与测试是软件生存周期中很重要的一个阶段，如何对软件进行较全面、高率的测试并尽可能地找出软件中的错误就成为很关键的问题。因此在编写源代码之前，除了要有一套比较完善的测试计划外，还应设计出一系列代码测试手段，为单元测试、集成测试及系统联调提供方便。<br>
&amp;frac12;&nbsp;7-2：调测开关应分为不同级别和类型。<br>
说明：调测开关的设置及分类应从以下几方面考虑：针对模块或系统某部分代码的调测；针对模块或系统某功能的调测；出于某种其它目的，如对性能、容量等的测试。这样做便于软件功能的调测，并且便于模块的单元测试、系统联调等。<br>
&amp;frac12;&nbsp;7-3：编写防错程序，然后在处理错误之后可用断言宣布发生错误。<br>
示例：假如某模块收到通信链路上的消息，则应对消息的合法性进行检查，若消息类别不是通信协议中规定的，则应进行出错处理，之后可用断言报告，如下例。<br>
#ifdef&nbsp;_EXAM_ASSERT_TEST_&nbsp;//&nbsp;若使用断言测试<br>
<br>
/*&nbsp;Notice:&nbsp;this&nbsp;function&nbsp;does&nbsp;not&nbsp;call&nbsp;'abort'&nbsp;to&nbsp;exit&nbsp;program&nbsp;*/<br>
void&nbsp;assert_report(&nbsp;char&nbsp;*&nbsp;file_name,&nbsp;unsigned&nbsp;int&nbsp;line_no&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;printf(&nbsp;&quot;\n[EXAM]Error&nbsp;Report:&nbsp;%s,&nbsp;line&nbsp;%u\n&quot;,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_name,&nbsp;line_no&nbsp;);<br>
}<br>
<br>
#define&nbsp;&nbsp;ASSERT_REPORT(&nbsp;condition&nbsp;)&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;condition&nbsp;)&nbsp;//&nbsp;若条件成立，则无动作<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL;<br>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;//&nbsp;否则报告<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert_report&nbsp;(&nbsp;__FILE__,&nbsp;__LINE__&nbsp;)&nbsp;<br>
<br>
#else&nbsp;//&nbsp;若不使用断言测试<br>
<br>
#define&nbsp;ASSERT_REPORT(&nbsp;condition&nbsp;)&nbsp;&nbsp;NULL&nbsp;<br>
<br>
#endif&nbsp;/*&nbsp;end&nbsp;of&nbsp;ASSERT&nbsp;*/<br>
<br>
int&nbsp;msg_handle(&nbsp;unsigned&nbsp;char&nbsp;msg_name,&nbsp;unsigned&nbsp;char&nbsp;*&nbsp;msg&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;switch(&nbsp;msg_name&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;MSG_ONE:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;//&nbsp;消息MSG_ONE处理<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;MSG_HANDLE_SUCCESS;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;//&nbsp;其它合法消息处理<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;//&nbsp;消息出错处理<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ASSERT_REPORT(&nbsp;FALSE&nbsp;);&nbsp;&nbsp;//&nbsp;“合法”消息不成立，报告<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;MSG_HANDLE_ERROR;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}&nbsp;<br>
8&nbsp;程序效率<br>
&amp;sup1;&nbsp;8-1：编程时要经常注意代码的效率。<br>
说明：代码效率分为全局效率、局部效率、时间效率及空间效率。全局效率是站在整个系统的角度上的系统效率；局部效率是站在模块或函数角度上的效率；时间效率是程序处理输入任务所需的时间长短；空间效率是程序所需内存空间，如机器代码空间大小、数据空间大小、栈空间大小等。<br>
&amp;sup1;&nbsp;8-2：在保证软件系统的正确性、稳定性、可读性及可测性的前提下，提高代码效率。<br>
说明：不能一味地追求代码效率，而对软件的正确性、稳定性、可读性及可测性造成影响。<br>
&amp;sup1;&nbsp;8-3：局部效率应为全局效率服务，不能因为提高局部效率而对全局效率造成影响。<br>
&amp;sup1;&nbsp;8-4：通过对系统数据结构的划分与组织的改进，以及对程序算法的优化来提高空间效率。<br>
说明：这种方式是解决软件空间效率的根本办法。<br>
示例：如下记录学生学习成绩的结构不合理。<br>
typedef&nbsp;unsigned&nbsp;char&nbsp;&nbsp;BYTE;<br>
typedef&nbsp;unsigned&nbsp;short&nbsp;WORD;<br>
<br>
typedef&nbsp;struct&nbsp;STUDENT_SCORE_STRU<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;name[8];<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;age;<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;sex;<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;subject;<br>
&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;score;<br>
}&nbsp;STUDENT_SCORE;<br>
<br>
因为每位学生都有多科学习成绩，故如上结构将占用较大空间。应如下改进（分为两个结构），总的存贮空间将变小，操作也变得更方便。<br>
typedef&nbsp;struct&nbsp;STUDENT_STRU<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;name[8];<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;age;<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;sex;<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;class;<br>
}&nbsp;STUDENT;<br>
<br>
typedef&nbsp;struct&nbsp;STUDENT_SCORE_STRU<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;WORD&nbsp;student_index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE&nbsp;subject;<br>
&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;score;<br>
}&nbsp;STUDENT_SCORE;<br>
&amp;sup1;&nbsp;8-5：循环体内工作量最小化。<br>
说明：应仔细考虑循环体内的语句是否可以放在循环体之外，使循环体内工作量最小，从而提高程序的时间效率。<br>
示例：如下代码效率不高。<br>
for&nbsp;(ind&nbsp;=&nbsp;0;&nbsp;ind&nbsp;&lt;&nbsp;MAX_ADD_NUMBER;&nbsp;ind++)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;ind;<br>
&nbsp;&nbsp;&nbsp;&nbsp;back_sum&nbsp;=&nbsp;sum;&nbsp;/*&nbsp;backup&nbsp;sum&nbsp;*/<br>
}<br>
<br>
语句“back_sum&nbsp;=&nbsp;sum;”完全可以放在for语句之后，如下。<br>
for&nbsp;(ind&nbsp;=&nbsp;0;&nbsp;ind&nbsp;&lt;&nbsp;MAX_ADD_NUMBER;&nbsp;ind++)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;ind;<br>
}<br>
back_sum&nbsp;&nbsp;=&nbsp;sum;&nbsp;/*&nbsp;backup&nbsp;sum&nbsp;*/<br>
&amp;frac12;&nbsp;8-1：仔细分析有关算法，并进行优化。<br>
&amp;frac12;&nbsp;8-2：仔细考查、分析系统及模块处理输入（如事务、消息等）的方式，并加以改进。<br>
&amp;frac12;&nbsp;8-3：对模块中函数的划分及组织方式进行分析、优化，改进模块中函数的组织结构，提高程序效率。<br>
说明：软件系统的效率主要与算法、处理任务方式、系统功能及函数结构有很大关系，仅在代码上下功夫一般不能解决根本问题。<br>
&amp;frac12;&nbsp;8-4：编程时，要随时留心代码效率；优化代码时，要考虑周全。<br>
&amp;frac12;&nbsp;8-5：不应花过多的时间拼命地提高调用不很频繁的函数代码效率。<br>
说明：对代码优化可提高效率，但若考虑不周很有可能引起严重后果。<br>
&amp;frac12;&nbsp;8-6：要仔细地构造或直接用汇编编写调用频繁或性能要求极高的函数。<br>
说明：只有对编译系统产生机器码的方式以及硬件系统较为熟悉时，才可使用汇编嵌入方式。嵌入汇编可提高时间及空间效率，但也存在一定风险。<br>
&amp;frac12;&nbsp;8-7：在保证程序质量的前提下，通过压缩代码量、去掉不必要代码以及减少不必要的局部和全局变量，来提高空间效率。<br>
说明：这种方式对提高空间效率可起到一定作用，但往往不能解决根本问题。<br>
&amp;frac12;&nbsp;8-8：在多重循环中，应将最忙的循环放在最内层。<br>
说明：减少CPU切入循环层的次数。<br>
示例：如下代码效率不高。<br>
for&nbsp;(row&nbsp;=&nbsp;0;&nbsp;row&nbsp;&lt;&nbsp;100;&nbsp;row++)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(col&nbsp;=&nbsp;0;&nbsp;col&nbsp;&lt;&nbsp;5;&nbsp;col++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;a[row][col];<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
<br>
可以改为如下方式，以提高效率。<br>
for&nbsp;(col&nbsp;=&nbsp;0;&nbsp;col&nbsp;&lt;&nbsp;5;&nbsp;col++)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(row&nbsp;=&nbsp;0;&nbsp;row&nbsp;&lt;&nbsp;100;&nbsp;row++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;a[row][col];<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
&amp;frac12;&nbsp;8-9：尽量减少循环嵌套层次。<br>
&amp;frac12;&nbsp;8-10：避免循环体内含判断语句，应将循环语句置于判断语句的代码块之中。<br>
说明：目的是减少判断次数。循环体中的判断语句是否可以移到循环体外，要视程序的具体情况而言，一般情况，与循环变量无关的判断语句可以移到循环体外，而有关的则不可以。<br>
示例：如下代码效率稍低。<br>
for&nbsp;(ind&nbsp;=&nbsp;0;&nbsp;ind&nbsp;&lt;&nbsp;MAX_RECT_NUMBER;&nbsp;ind++)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(data_type&nbsp;==&nbsp;RECT_AREA)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area_sum&nbsp;+=&nbsp;rect_area[ind];<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rect_length_sum&nbsp;+=&nbsp;rect[ind].length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rect_width_sum&nbsp;+=&nbsp;rect[ind].width;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
<br>
因为判断语句与循环变量无关，故可如下改进，以减少判断次数。<br>
if&nbsp;(data_type&nbsp;==&nbsp;RECT_AREA)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(ind&nbsp;=&nbsp;0;&nbsp;ind&nbsp;&lt;&nbsp;MAX_RECT_NUMBER;&nbsp;ind++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area_sum&nbsp;+=&nbsp;rect_area[ind];<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
else<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(ind&nbsp;=&nbsp;0;&nbsp;ind&nbsp;&lt;&nbsp;MAX_RECT_NUMBER;&nbsp;ind++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rect_length_sum&nbsp;+=&nbsp;rect[ind].length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rect_width_sum&nbsp;&nbsp;+=&nbsp;rect[ind].width;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
&amp;frac12;&nbsp;8-11：尽量用乘法或其它方法代替除法，特别是浮点运算中的除法。<br>
说明：浮点运算除法要占用较多CPU资源。<br>
示例：如下表达式运算可能要占较多CPU资源。<br>
#define&nbsp;PAI&nbsp;3.1416<br>
radius&nbsp;=&nbsp;circle_length&nbsp;/&nbsp;(2&nbsp;*&nbsp;PAI);<br>
<br>
应如下把浮点除法改为浮点乘法。<br>
#define&nbsp;PAI_RECIPROCAL&nbsp;(1&nbsp;/&nbsp;3.1416&nbsp;)&nbsp;//&nbsp;编译器编译时，将生成具体浮点数<br>
radius&nbsp;=&nbsp;circle_length&nbsp;*&nbsp;PAI_RECIPROCAL&nbsp;/&nbsp;2;&nbsp;<br>
&amp;frac12;&nbsp;8-12：不要一味追求紧凑的代码。<br>
说明：因为紧凑的代码并不代表高效的机器码。</td> 
          </tr>
          <tr>
            <td width="600"></td> 
          </tr>
		  <tr>
            <td width="600"><b>郑重声明</b><br>
              &nbsp;&nbsp; 近年来我站数百篇“原创文章”被一些媒体肆意转载，不但不标明出自“中国电子技术信息网”，而且把相关字眼删除！这是无视技术价值的盗窃行为，是对技术人员辛勤劳动的蔑视，我对此种行为表示强烈的谴责。<br>
              &nbsp;&nbsp; “本是同根生，相煎何太急”，考虑到我们做技术的都是同门兄弟，对以前的盗窃行为不再追究，今后再有此类事件，最低处理限度是“明示于天下”。在这里向转载过又标注了出处的兄弟媒体表示崇高的敬意！<br>
              &nbsp;&nbsp; 兄弟网站如果引用本站“原创文章”，请首先经本人许可，并标注“www.cetinet.com”或“中国电子技术信息网”字样。<br>
              &nbsp;&nbsp; 欢迎个人下载使用！</td> 
          </tr>
        </table>
      </td>
    </tr>
  </table>
  <br>
  <br>
</div>

</body>
<body bgcolor="#FFFFFF" text="#000000">
  <p align="center">
  本站所载文章力求原创，部分资料转自网上，假如您认为某些文章侵犯了您的权益，<br>
  请告知我们，我们将在最短的时间内删除有关文章。本站转载文章均注明出处。<br>
  兄弟网站如果转载本站文章请注明本站版权，谢谢！
  <p align="center">中国电子技术信息网 文章管理系统由：Aoe 制作<br>      
  Copyright (C) 2001-2004 CETINet.COM All Rights Reserved      
</body>    

</html>

