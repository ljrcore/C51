; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\stm32f10x_gpio.o --depend=.\Obj\stm32f10x_gpio.d --device=DARMSTM --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\Core\CM3 -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\Obj\stm32f10x_gpio.crf ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;147      */
;;;148    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;149    {
;;;150      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;151      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  e8bd4010          POP      {r4,lr}
000010  2001              MOVS     r0,#1
000012  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;152    }
;;;153    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;99       */
;;;100    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  4a25              LDR      r2,|L2.152|
;;;101    {
000002  b510              PUSH     {r4,lr}
;;;102      /* Check the parameters */
;;;103      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;104      
;;;105      switch (*(uint32_t*)&GPIOx)
000004  1a81              SUBS     r1,r0,r2
000006  1513              ASRS     r3,r2,#20
000008  14d4              ASRS     r4,r2,#19
00000a  4290              CMP      r0,r2
00000c  d02e              BEQ      |L2.108|
00000e  dc0d              BGT      |L2.44|
000010  4922              LDR      r1,|L2.156|
000012  1840              ADDS     r0,r0,r1
000014  d01c              BEQ      |L2.80|
000016  4298              CMP      r0,r3
000018  d021              BEQ      |L2.94|
00001a  42a0              CMP      r0,r4
00001c  d13b              BNE      |L2.150|
;;;106      {
;;;107        case GPIOA_BASE:
;;;108          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;109          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
;;;110          break;
;;;111        case GPIOB_BASE:
;;;112          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
;;;113          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
;;;114          break;
;;;115        case GPIOC_BASE:
;;;116          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
00001e  2101              MOVS     r1,#1
000020  2010              MOVS     r0,#0x10
000022  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;117          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000026  2100              MOVS     r1,#0
000028  2010              MOVS     r0,#0x10
;;;118          break;
00002a  e00d              B        |L2.72|
                  |L2.44|
00002c  4299              CMP      r1,r3                 ;105
00002e  d024              BEQ      |L2.122|
000030  42a1              CMP      r1,r4                 ;105
000032  d029              BEQ      |L2.136|
000034  f5b16f40          CMP      r1,#0xc00             ;105
000038  d12d              BNE      |L2.150|
;;;119        case GPIOD_BASE:
;;;120          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
;;;121          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
;;;122          break;
;;;123          
;;;124        case GPIOE_BASE:
;;;125          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
;;;126          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
;;;127          break; 
;;;128        case GPIOF_BASE:
;;;129          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
;;;130          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
;;;131          break;
;;;132        case GPIOG_BASE:
;;;133          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  020c              LSLS     r4,r1,#8
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;134          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
000044  2100              MOVS     r1,#0
000046  4620              MOV      r0,r4
                  |L2.72|
000048  e8bd4010          POP      {r4,lr}
00004c  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.80|
000050  2101              MOVS     r1,#1                 ;108
000052  2004              MOVS     r0,#4                 ;108
000054  f7fffffe          BL       RCC_APB2PeriphResetCmd
000058  2100              MOVS     r1,#0                 ;109
00005a  2004              MOVS     r0,#4                 ;109
00005c  e7f4              B        |L2.72|
                  |L2.94|
00005e  2101              MOVS     r1,#1                 ;112
000060  2008              MOVS     r0,#8                 ;112
000062  f7fffffe          BL       RCC_APB2PeriphResetCmd
000066  2100              MOVS     r1,#0                 ;113
000068  2008              MOVS     r0,#8                 ;113
00006a  e7ed              B        |L2.72|
                  |L2.108|
00006c  2101              MOVS     r1,#1                 ;120
00006e  2020              MOVS     r0,#0x20              ;120
000070  f7fffffe          BL       RCC_APB2PeriphResetCmd
000074  2100              MOVS     r1,#0                 ;121
000076  2020              MOVS     r0,#0x20              ;121
000078  e7e6              B        |L2.72|
                  |L2.122|
00007a  2101              MOVS     r1,#1                 ;125
00007c  2040              MOVS     r0,#0x40              ;125
00007e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000082  2100              MOVS     r1,#0                 ;126
000084  2040              MOVS     r0,#0x40              ;126
000086  e7df              B        |L2.72|
                  |L2.136|
000088  2101              MOVS     r1,#1                 ;129
00008a  2080              MOVS     r0,#0x80              ;129
00008c  f7fffffe          BL       RCC_APB2PeriphResetCmd
000090  2100              MOVS     r1,#0                 ;130
000092  2080              MOVS     r0,#0x80              ;130
000094  e7d8              B        |L2.72|
                  |L2.150|
;;;135          break;
;;;136        default:
;;;137          break;
;;;138      }
;;;139    }
000096  bd10              POP      {r4,pc}
;;;140    
                          ENDP

                  |L2.152|
                          DCD      0x40011400
                  |L2.156|
                          DCD      0xbffef800

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;561      */
;;;562    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b510              PUSH     {r4,lr}
;;;563    {
;;;564      uint32_t tmp = 0x00;
;;;565      /* Check the parameters */
;;;566      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;567      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;568      
;;;569      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000002  078a              LSLS     r2,r1,#30
;;;570      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
000004  f0210403          BIC      r4,r1,#3
000008  4906              LDR      r1,|L3.36|
00000a  0f12              LSRS     r2,r2,#28             ;569
00000c  4421              ADD      r1,r1,r4
00000e  230f              MOVS     r3,#0xf               ;569
000010  688c              LDR      r4,[r1,#8]
000012  4093              LSLS     r3,r3,r2              ;569
000014  439c              BICS     r4,r4,r3
000016  608c              STR      r4,[r1,#8]
;;;571      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
000018  688b              LDR      r3,[r1,#8]
00001a  4090              LSLS     r0,r0,r2
00001c  4303              ORRS     r3,r3,r0
00001e  608b              STR      r3,[r1,#8]
;;;572    }
000020  bd10              POP      {r4,pc}
;;;573    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      0x40010000

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;477      */
;;;478    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;479    {
;;;480      /* Check the parameters */
;;;481      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;482      
;;;483      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;484    }
000004  4770              BX       lr
;;;485    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;456      */
;;;457    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b510              PUSH     {r4,lr}
;;;458    {
;;;459      uint32_t tmpreg = 0x00;
;;;460      /* Check the parameters */
;;;461      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;462      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;463        
;;;464      tmpreg = AFIO->EVCR;
000002  4b05              LDR      r3,|L5.24|
000004  681a              LDR      r2,[r3,#0]
;;;465      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;466      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000006  f64f7480          MOV      r4,#0xff80
00000a  4022              ANDS     r2,r2,r4
;;;467      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
00000c  ea421000          ORR      r0,r2,r0,LSL #4
;;;468      tmpreg |= GPIO_PinSource;
000010  4308              ORRS     r0,r0,r1
;;;469      AFIO->EVCR = tmpreg;
000012  6018              STR      r0,[r3,#0]
;;;470    }
000014  bd10              POP      {r4,pc}
;;;471    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;162      */
;;;163    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;164    {
;;;165      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
;;;166      uint32_t tmpreg = 0x00, pinmask = 0x00;
;;;167      /* Check the parameters */
;;;168      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;169      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;170      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;171      
;;;172    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;173      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
000002  78cb              LDRB     r3,[r1,#3]
000004  2200              MOVS     r2,#0                 ;165
;;;174      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
000006  06dc              LSLS     r4,r3,#27
000008  f003030f          AND      r3,r3,#0xf            ;173
00000c  d501              BPL      |L6.18|
;;;175      { 
;;;176        /* Check the parameters */
;;;177        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;178        /* Output mode */
;;;179        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
00000e  788c              LDRB     r4,[r1,#2]
000010  4323              ORRS     r3,r3,r4
                  |L6.18|
;;;180      }
;;;181    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;182      /* Configure the eight low port pins */
;;;183      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
000012  880c              LDRH     r4,[r1,#0]
;;;184      {
;;;185        tmpreg = GPIOx->CRL;
;;;186        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;187        {
;;;188          pos = ((uint32_t)0x01) << pinpos;
;;;189          /* Get the port pins position */
;;;190          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;191          if (currentpin == pos)
;;;192          {
;;;193            pos = pinpos << 2;
;;;194            /* Clear the corresponding low control register bits */
;;;195            pinmask = ((uint32_t)0x0F) << pos;
000014  f04f0c0f          MOV      r12,#0xf
000018  f0140fff          TST      r4,#0xff              ;183
00001c  f04f0e01          MOV      lr,#1                 ;188
000020  d01a              BEQ      |L6.88|
000022  6806              LDR      r6,[r0,#0]            ;185
                  |L6.36|
000024  880d              LDRH     r5,[r1,#0]            ;190
000026  fa0ef402          LSL      r4,lr,r2              ;188
00002a  4025              ANDS     r5,r5,r4              ;190
00002c  42a5              CMP      r5,r4                 ;191
00002e  d10f              BNE      |L6.80|
000030  0095              LSLS     r5,r2,#2              ;191
000032  fa0cf705          LSL      r7,r12,r5
;;;196            tmpreg &= ~pinmask;
000036  ea260707          BIC      r7,r6,r7
;;;197            /* Write the mode configuration in the corresponding bits */
;;;198            tmpreg |= (currentmode << pos);
00003a  fa03f605          LSL      r6,r3,r5
;;;199            /* Reset the corresponding ODR bit */
;;;200            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
00003e  78cd              LDRB     r5,[r1,#3]
000040  433e              ORRS     r6,r6,r7              ;198
000042  2d28              CMP      r5,#0x28
000044  d101              BNE      |L6.74|
;;;201            {
;;;202              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
000046  6144              STR      r4,[r0,#0x14]
000048  e002              B        |L6.80|
                  |L6.74|
;;;203            }
;;;204            else
;;;205            {
;;;206              /* Set the corresponding ODR bit */
;;;207              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
00004a  2d48              CMP      r5,#0x48
00004c  d100              BNE      |L6.80|
;;;208              {
;;;209                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
00004e  6104              STR      r4,[r0,#0x10]
                  |L6.80|
000050  1c52              ADDS     r2,r2,#1              ;186
000052  2a08              CMP      r2,#8                 ;186
000054  d3e6              BCC      |L6.36|
;;;210              }
;;;211            }
;;;212          }
;;;213        }
;;;214        GPIOx->CRL = tmpreg;
000056  6006              STR      r6,[r0,#0]
                  |L6.88|
;;;215      }
;;;216    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;217      /* Configure the eight high port pins */
;;;218      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000058  880a              LDRH     r2,[r1,#0]
00005a  2aff              CMP      r2,#0xff
00005c  d91e              BLS      |L6.156|
;;;219      {
;;;220        tmpreg = GPIOx->CRH;
00005e  6846              LDR      r6,[r0,#4]
;;;221        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000060  f05f0200          MOVS.W   r2,#0
                  |L6.100|
;;;222        {
;;;223          pos = (((uint32_t)0x01) << (pinpos + 0x08));
000064  f1020508          ADD      r5,r2,#8
000068  fa0ef405          LSL      r4,lr,r5
;;;224          /* Get the port pins position */
;;;225          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
00006c  880d              LDRH     r5,[r1,#0]
00006e  4025              ANDS     r5,r5,r4
;;;226          if (currentpin == pos)
000070  42a5              CMP      r5,r4
000072  d10f              BNE      |L6.148|
000074  0095              LSLS     r5,r2,#2
;;;227          {
;;;228            pos = pinpos << 2;
;;;229            /* Clear the corresponding high control register bits */
;;;230            pinmask = ((uint32_t)0x0F) << pos;
000076  fa0cf705          LSL      r7,r12,r5
;;;231            tmpreg &= ~pinmask;
00007a  ea260707          BIC      r7,r6,r7
;;;232            /* Write the mode configuration in the corresponding bits */
;;;233            tmpreg |= (currentmode << pos);
00007e  fa03f605          LSL      r6,r3,r5
;;;234            /* Reset the corresponding ODR bit */
;;;235            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000082  78cd              LDRB     r5,[r1,#3]
000084  433e              ORRS     r6,r6,r7              ;233
000086  2d28              CMP      r5,#0x28
000088  d100              BNE      |L6.140|
;;;236            {
;;;237              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
00008a  6144              STR      r4,[r0,#0x14]
                  |L6.140|
;;;238            }
;;;239            /* Set the corresponding ODR bit */
;;;240            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
00008c  78cd              LDRB     r5,[r1,#3]
00008e  2d48              CMP      r5,#0x48
000090  d100              BNE      |L6.148|
;;;241            {
;;;242              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
000092  6104              STR      r4,[r0,#0x10]
                  |L6.148|
000094  1c52              ADDS     r2,r2,#1              ;221
000096  2a08              CMP      r2,#8                 ;221
000098  d3e4              BCC      |L6.100|
;;;243            }
;;;244          }
;;;245        }
;;;246        GPIOx->CRH = tmpreg;
00009a  6046              STR      r6,[r0,#4]
                  |L6.156|
;;;247      }
;;;248    }
00009c  bdf0              POP      {r4-r7,pc}
;;;249    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;425      */
;;;426    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  f4413280          ORR      r2,r1,#0x10000
;;;427    {
;;;428      uint32_t tmp = 0x00010000;
;;;429      
;;;430      /* Check the parameters */
;;;431      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;432      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;433      
;;;434      tmp |= GPIO_Pin;
;;;435      /* Set LCKK bit */
;;;436      GPIOx->LCKR = tmp;
000004  6182              STR      r2,[r0,#0x18]
;;;437      /* Reset LCKK bit */
;;;438      GPIOx->LCKR =  GPIO_Pin;
000006  6181              STR      r1,[r0,#0x18]
;;;439      /* Set LCKK bit */
;;;440      GPIOx->LCKR = tmp;
000008  6182              STR      r2,[r0,#0x18]
;;;441      /* Read LCKK bit*/
;;;442      tmp = GPIOx->LCKR;
00000a  6981              LDR      r1,[r0,#0x18]
;;;443      /* Read LCKK bit*/
;;;444      tmp = GPIOx->LCKR;
00000c  6980              LDR      r0,[r0,#0x18]
;;;445    }
00000e  4770              BX       lr
;;;446    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;518      */
;;;519    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;520    {
;;;521      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;522      /* Check the parameters */
;;;523      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;524      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;525      
;;;526      tmpreg = AFIO->MAPR;
000002  4d10              LDR      r5,|L8.68|
000004  686b              LDR      r3,[r5,#4]
;;;527      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
;;;528      tmp = GPIO_Remap & LSB_MASK;
;;;529      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
;;;530      {
;;;531        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;532        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;533      }
;;;534      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;535      {
;;;536        tmp1 = ((uint32_t)0x03) << tmpmask;
;;;537        tmpreg &= ~tmp1;
;;;538        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;539      }
;;;540      else
;;;541      {
;;;542        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
000006  0d44              LSRS     r4,r0,#21
000008  0126              LSLS     r6,r4,#4
00000a  b284              UXTH     r4,r0                 ;528
00000c  f3c05701          UBFX     r7,r0,#20,#2          ;529
000010  40b4              LSLS     r4,r4,r6
000012  f3c04203          UBFX     r2,r0,#16,#4          ;527
000016  2f03              CMP      r7,#3                 ;529
000018  d106              BNE      |L8.40|
00001a  6868              LDR      r0,[r5,#4]            ;532
00001c  f0236270          BIC      r2,r3,#0xf000000      ;531
000020  f0206070          BIC      r0,r0,#0xf000000      ;532
000024  6068              STR      r0,[r5,#4]            ;532
000026  e008              B        |L8.58|
                  |L8.40|
000028  02c0              LSLS     r0,r0,#11             ;534
00002a  d503              BPL      |L8.52|
00002c  2003              MOVS     r0,#3                 ;536
00002e  4090              LSLS     r0,r0,r2              ;536
000030  4383              BICS     r3,r3,r0              ;537
000032  e000              B        |L8.54|
                  |L8.52|
000034  43a3              BICS     r3,r3,r4
                  |L8.54|
000036  f0436270          ORR      r2,r3,#0xf000000      ;538
                  |L8.58|
;;;543        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;544      }
;;;545      if (NewState != DISABLE)
00003a  b101              CBZ      r1,|L8.62|
;;;546      {
;;;547        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
00003c  4322              ORRS     r2,r2,r4
                  |L8.62|
;;;548      }
;;;549      AFIO->MAPR = tmpreg;
00003e  606a              STR      r2,[r5,#4]
;;;550    }
000040  bdf0              POP      {r4-r7,pc}
;;;551    
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;294      */
;;;295    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  6880              LDR      r0,[r0,#8]
;;;296    {
;;;297      /* Check the parameters */
;;;298      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;299      
;;;300      return ((uint16_t)GPIOx->IDR);
000002  b280              UXTH     r0,r0
;;;301    }
000004  4770              BX       lr
;;;302    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;270      */
;;;271    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;272    {
;;;273      uint8_t bitstatus = 0x00;
;;;274      
;;;275      /* Check the parameters */
;;;276      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;277      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;278      
;;;279      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000002  6892              LDR      r2,[r2,#8]
000004  2000              MOVS     r0,#0                 ;273
000006  420a              TST      r2,r1
000008  d000              BEQ      |L10.12|
;;;280      {
;;;281        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L10.12|
;;;282      }
;;;283      else
;;;284      {
;;;285        bitstatus = (uint8_t)Bit_RESET;
;;;286      }
;;;287      return bitstatus;
;;;288    }
00000c  4770              BX       lr
;;;289    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;332      */
;;;333    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  68c0              LDR      r0,[r0,#0xc]
;;;334    {
;;;335      /* Check the parameters */
;;;336      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;337        
;;;338      return ((uint16_t)GPIOx->ODR);
000002  b280              UXTH     r0,r0
;;;339    }
000004  4770              BX       lr
;;;340    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;309      */
;;;310    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;311    {
;;;312      uint8_t bitstatus = 0x00;
;;;313      /* Check the parameters */
;;;314      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;315      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;316      
;;;317      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000002  68d2              LDR      r2,[r2,#0xc]
000004  2000              MOVS     r0,#0                 ;312
000006  420a              TST      r2,r1
000008  d000              BEQ      |L12.12|
;;;318      {
;;;319        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L12.12|
;;;320      }
;;;321      else
;;;322      {
;;;323        bitstatus = (uint8_t)Bit_RESET;
;;;324      }
;;;325      return bitstatus;
;;;326    }
00000c  4770              BX       lr
;;;327    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;365      */
;;;366    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;367    {
;;;368      /* Check the parameters */
;;;369      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;370      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;371      
;;;372      GPIOx->BRR = GPIO_Pin;
;;;373    }
000002  4770              BX       lr
;;;374    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;348      */
;;;349    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;350    {
;;;351      /* Check the parameters */
;;;352      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;353      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;354      
;;;355      GPIOx->BSRR = GPIO_Pin;
;;;356    }
000002  4770              BX       lr
;;;357    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;255      */
;;;256    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;257    {
;;;258      /* Reset GPIO init structure parameters values */
;;;259      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;260      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;261      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;262    }
00000e  4770              BX       lr
;;;263    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;409      */
;;;410    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;411    {
;;;412      /* Check the parameters */
;;;413      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;414      
;;;415      GPIOx->ODR = PortVal;
;;;416    }
000002  4770              BX       lr
;;;417    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;385      */
;;;386    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L17.6|
;;;387    {
;;;388      /* Check the parameters */
;;;389      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;390      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;391      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;392      
;;;393      if (BitVal != Bit_RESET)
;;;394      {
;;;395        GPIOx->BSRR = GPIO_Pin;
000002  6101              STR      r1,[r0,#0x10]
;;;396      }
;;;397      else
;;;398      {
;;;399        GPIOx->BRR = GPIO_Pin;
;;;400      }
;;;401    }
000004  4770              BX       lr
                  |L17.6|
000006  6141              STR      r1,[r0,#0x14]         ;399
000008  4770              BX       lr
;;;402    
                          ENDP

