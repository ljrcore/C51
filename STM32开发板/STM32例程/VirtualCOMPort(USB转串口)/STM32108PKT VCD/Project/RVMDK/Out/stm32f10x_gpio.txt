; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Out\stm32f10x_gpio.o --depend=.\Out\stm32f10x_gpio.d --device=DARMSTM --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Core\CM3 -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I"D:\Program Files\KeilARM350\ARM\INC\ST\STM32F10x" ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;148      */
;;;149    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;150    {
;;;151      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;152      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;153    }
000012  bd10              POP      {r4,pc}
;;;154    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;100      */
;;;101    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;102    {
000002  4604              MOV      r4,r0
;;;103      /* Check the parameters */
;;;104      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;105      
;;;106      switch (*(uint32_t*)&GPIOx)
000004  492d              LDR      r1,|L2.188|
000006  1a60              SUBS     r0,r4,r1
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L2.108|
00000c  dc09              BGT      |L2.34|
00000e  482c              LDR      r0,|L2.192|
000010  1820              ADDS     r0,r4,r0
000012  d010              BEQ      |L2.54|
000014  f5b06f80          CMP      r0,#0x400
000018  d016              BEQ      |L2.72|
00001a  f5b06f00          CMP      r0,#0x800
00001e  d14a              BNE      |L2.182|
000020  e01b              B        |L2.90|
                  |L2.34|
000022  f5b06f80          CMP      r0,#0x400
000026  d02a              BEQ      |L2.126|
000028  f5b06f00          CMP      r0,#0x800
00002c  d030              BEQ      |L2.144|
00002e  f5b06f40          CMP      r0,#0xc00
000032  d140              BNE      |L2.182|
000034  e035              B        |L2.162|
                  |L2.54|
;;;107      {
;;;108        case GPIOA_BASE:
;;;109          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
000036  2101              MOVS     r1,#1
000038  2004              MOVS     r0,#4
00003a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;110          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
00003e  2100              MOVS     r1,#0
000040  2004              MOVS     r0,#4
000042  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;111          break;
000046  e037              B        |L2.184|
                  |L2.72|
;;;112        case GPIOB_BASE:
;;;113          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
000048  2101              MOVS     r1,#1
00004a  2008              MOVS     r0,#8
00004c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;114          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
000050  2100              MOVS     r1,#0
000052  2008              MOVS     r0,#8
000054  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;115          break;
000058  e02e              B        |L2.184|
                  |L2.90|
;;;116        case GPIOC_BASE:
;;;117          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
00005a  2101              MOVS     r1,#1
00005c  2010              MOVS     r0,#0x10
00005e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;118          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000062  2100              MOVS     r1,#0
000064  2010              MOVS     r0,#0x10
000066  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;119          break;
00006a  e025              B        |L2.184|
                  |L2.108|
;;;120        case GPIOD_BASE:
;;;121          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2020              MOVS     r0,#0x20
000070  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;122          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
000074  2100              MOVS     r1,#0
000076  2020              MOVS     r0,#0x20
000078  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;123          break;
00007c  e01c              B        |L2.184|
                  |L2.126|
;;;124          
;;;125        case GPIOE_BASE:
;;;126          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
00007e  2101              MOVS     r1,#1
000080  2040              MOVS     r0,#0x40
000082  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;127          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000086  2100              MOVS     r1,#0
000088  2040              MOVS     r0,#0x40
00008a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;128          break; 
00008e  e013              B        |L2.184|
                  |L2.144|
;;;129        case GPIOF_BASE:
;;;130          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
000090  2101              MOVS     r1,#1
000092  2080              MOVS     r0,#0x80
000094  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;131          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
000098  2100              MOVS     r1,#0
00009a  2080              MOVS     r0,#0x80
00009c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;132          break;
0000a0  e00a              B        |L2.184|
                  |L2.162|
;;;133        case GPIOG_BASE:
;;;134          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
0000a2  2101              MOVS     r1,#1
0000a4  0208              LSLS     r0,r1,#8
0000a6  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;135          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
0000aa  2100              MOVS     r1,#0
0000ac  f44f7080          MOV      r0,#0x100
0000b0  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;136          break;
0000b4  e000              B        |L2.184|
                  |L2.182|
;;;137        default:
;;;138          break;
0000b6  bf00              NOP      
                  |L2.184|
0000b8  bf00              NOP                            ;111
;;;139      }
;;;140    }
0000ba  bd10              POP      {r4,pc}
;;;141    
                          ENDP

                  |L2.188|
                          DCD      0x40011400
                  |L2.192|
                          DCD      0xbffef800

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;562      */
;;;563    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b530              PUSH     {r4,r5,lr}
;;;564    {
;;;565      uint32_t tmp = 0x00;
000002  2200              MOVS     r2,#0
;;;566      /* Check the parameters */
;;;567      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;568      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;569      
;;;570      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000004  078b              LSLS     r3,r1,#30
000006  0f1c              LSRS     r4,r3,#28
000008  230f              MOVS     r3,#0xf
00000a  fa03f204          LSL      r2,r3,r4
;;;571      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
00000e  4b0a              LDR      r3,|L3.56|
000010  108c              ASRS     r4,r1,#2
000012  f8534024          LDR      r4,[r3,r4,LSL #2]
000016  4394              BICS     r4,r4,r2
000018  108d              ASRS     r5,r1,#2
00001a  f8434025          STR      r4,[r3,r5,LSL #2]
;;;572      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
00001e  108c              ASRS     r4,r1,#2
000020  f8533024          LDR      r3,[r3,r4,LSL #2]
000024  078c              LSLS     r4,r1,#30
000026  0f24              LSRS     r4,r4,#28
000028  fa00f404          LSL      r4,r0,r4
00002c  4323              ORRS     r3,r3,r4
00002e  4c02              LDR      r4,|L3.56|
000030  108d              ASRS     r5,r1,#2
000032  f8443025          STR      r3,[r4,r5,LSL #2]
;;;573    }
000036  bd30              POP      {r4,r5,pc}
;;;574    
                          ENDP

                  |L3.56|
                          DCD      0x40010008

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;478      */
;;;479    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;480    {
;;;481      /* Check the parameters */
;;;482      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;483      
;;;484      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;485    }
000004  4770              BX       lr
;;;486    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;457      */
;;;458    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  2200              MOVS     r2,#0
;;;459    {
;;;460      uint32_t tmpreg = 0x00;
;;;461      /* Check the parameters */
;;;462      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;463      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;464        
;;;465      tmpreg = AFIO->EVCR;
000002  4b05              LDR      r3,|L5.24|
000004  681a              LDR      r2,[r3,#0]
;;;466      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;467      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000006  f64f7380          MOV      r3,#0xff80
00000a  401a              ANDS     r2,r2,r3
;;;468      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
00000c  ea421200          ORR      r2,r2,r0,LSL #4
;;;469      tmpreg |= GPIO_PinSource;
000010  430a              ORRS     r2,r2,r1
;;;470      AFIO->EVCR = tmpreg;
000012  4b01              LDR      r3,|L5.24|
000014  601a              STR      r2,[r3,#0]
;;;471    }
000016  4770              BX       lr
;;;472    
                          ENDP

                  |L5.24|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;163      */
;;;164    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;165    {
;;;166      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
000002  2200              MOVS     r2,#0
000004  2300              MOVS     r3,#0
000006  2400              MOVS     r4,#0
000008  2500              MOVS     r5,#0
;;;167      uint32_t tmpreg = 0x00, pinmask = 0x00;
00000a  2600              MOVS     r6,#0
00000c  2700              MOVS     r7,#0
;;;168      /* Check the parameters */
;;;169      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;170      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;171      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;172      
;;;173    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;174      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
00000e  f891c003          LDRB     r12,[r1,#3]
000012  f00c020f          AND      r2,r12,#0xf
;;;175      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
000016  f891c003          LDRB     r12,[r1,#3]
00001a  f01c0f10          TST      r12,#0x10
00001e  d003              BEQ      |L6.40|
;;;176      { 
;;;177        /* Check the parameters */
;;;178        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;179        /* Output mode */
;;;180        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
000020  f891c002          LDRB     r12,[r1,#2]
000024  ea4c0202          ORR      r2,r12,r2
                  |L6.40|
;;;181      }
;;;182    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;183      /* Configure the eight low port pins */
;;;184      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
000028  f8b1c000          LDRH     r12,[r1,#0]
00002c  f01c0fff          TST      r12,#0xff
000030  d031              BEQ      |L6.150|
;;;185      {
;;;186        tmpreg = GPIOx->CRL;
000032  6806              LDR      r6,[r0,#0]
;;;187        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000034  2400              MOVS     r4,#0
000036  e02b              B        |L6.144|
                  |L6.56|
;;;188        {
;;;189          pos = ((uint32_t)0x01) << pinpos;
000038  f04f0c01          MOV      r12,#1
00003c  fa0cf504          LSL      r5,r12,r4
;;;190          /* Get the port pins position */
;;;191          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
000040  f8b1c000          LDRH     r12,[r1,#0]
000044  ea0c0305          AND      r3,r12,r5
;;;192          if (currentpin == pos)
000048  42ab              CMP      r3,r5
00004a  d120              BNE      |L6.142|
;;;193          {
;;;194            pos = pinpos << 2;
00004c  00a5              LSLS     r5,r4,#2
;;;195            /* Clear the corresponding low control register bits */
;;;196            pinmask = ((uint32_t)0x0F) << pos;
00004e  f04f0c0f          MOV      r12,#0xf
000052  fa0cf705          LSL      r7,r12,r5
;;;197            tmpreg &= ~pinmask;
000056  43be              BICS     r6,r6,r7
;;;198            /* Write the mode configuration in the corresponding bits */
;;;199            tmpreg |= (currentmode << pos);
000058  fa02fc05          LSL      r12,r2,r5
00005c  ea4c0606          ORR      r6,r12,r6
;;;200            /* Reset the corresponding ODR bit */
;;;201            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000060  f891c003          LDRB     r12,[r1,#3]
000064  f1bc0f28          CMP      r12,#0x28
000068  d106              BNE      |L6.120|
;;;202            {
;;;203              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
00006a  f04f0c01          MOV      r12,#1
00006e  fa0cfc04          LSL      r12,r12,r4
000072  f8c0c014          STR      r12,[r0,#0x14]
000076  e00a              B        |L6.142|
                  |L6.120|
;;;204            }
;;;205            else
;;;206            {
;;;207              /* Set the corresponding ODR bit */
;;;208              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000078  f891c003          LDRB     r12,[r1,#3]
00007c  f1bc0f48          CMP      r12,#0x48
000080  d105              BNE      |L6.142|
;;;209              {
;;;210                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
000082  f04f0c01          MOV      r12,#1
000086  fa0cfc04          LSL      r12,r12,r4
00008a  f8c0c010          STR      r12,[r0,#0x10]
                  |L6.142|
00008e  1c64              ADDS     r4,r4,#1              ;187
                  |L6.144|
000090  2c08              CMP      r4,#8                 ;187
000092  d3d1              BCC      |L6.56|
;;;211              }
;;;212            }
;;;213          }
;;;214        }
;;;215        GPIOx->CRL = tmpreg;
000094  6006              STR      r6,[r0,#0]
                  |L6.150|
;;;216      }
;;;217    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;218      /* Configure the eight high port pins */
;;;219      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000096  f8b1c000          LDRH     r12,[r1,#0]
00009a  f1bc0fff          CMP      r12,#0xff
00009e  dd34              BLE      |L6.266|
;;;220      {
;;;221        tmpreg = GPIOx->CRH;
0000a0  6846              LDR      r6,[r0,#4]
;;;222        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
0000a2  2400              MOVS     r4,#0
0000a4  e02e              B        |L6.260|
                  |L6.166|
;;;223        {
;;;224          pos = (((uint32_t)0x01) << (pinpos + 0x08));
0000a6  f1040c08          ADD      r12,r4,#8
0000aa  f04f0e01          MOV      lr,#1
0000ae  fa0ef50c          LSL      r5,lr,r12
;;;225          /* Get the port pins position */
;;;226          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
0000b2  f8b1c000          LDRH     r12,[r1,#0]
0000b6  ea0c0305          AND      r3,r12,r5
;;;227          if (currentpin == pos)
0000ba  42ab              CMP      r3,r5
0000bc  d121              BNE      |L6.258|
;;;228          {
;;;229            pos = pinpos << 2;
0000be  00a5              LSLS     r5,r4,#2
;;;230            /* Clear the corresponding high control register bits */
;;;231            pinmask = ((uint32_t)0x0F) << pos;
0000c0  f04f0c0f          MOV      r12,#0xf
0000c4  fa0cf705          LSL      r7,r12,r5
;;;232            tmpreg &= ~pinmask;
0000c8  43be              BICS     r6,r6,r7
;;;233            /* Write the mode configuration in the corresponding bits */
;;;234            tmpreg |= (currentmode << pos);
0000ca  fa02fc05          LSL      r12,r2,r5
0000ce  ea4c0606          ORR      r6,r12,r6
;;;235            /* Reset the corresponding ODR bit */
;;;236            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
0000d2  f891c003          LDRB     r12,[r1,#3]
0000d6  f1bc0f28          CMP      r12,#0x28
0000da  d105              BNE      |L6.232|
;;;237            {
;;;238              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
0000dc  f1040c08          ADD      r12,r4,#8
0000e0  fa0efe0c          LSL      lr,lr,r12
0000e4  f8c0e014          STR      lr,[r0,#0x14]
                  |L6.232|
;;;239            }
;;;240            /* Set the corresponding ODR bit */
;;;241            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
0000e8  f891c003          LDRB     r12,[r1,#3]
0000ec  f1bc0f48          CMP      r12,#0x48
0000f0  d107              BNE      |L6.258|
;;;242            {
;;;243              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
0000f2  f1040c08          ADD      r12,r4,#8
0000f6  f04f0e01          MOV      lr,#1
0000fa  fa0efe0c          LSL      lr,lr,r12
0000fe  f8c0e010          STR      lr,[r0,#0x10]
                  |L6.258|
000102  1c64              ADDS     r4,r4,#1              ;222
                  |L6.260|
000104  2c08              CMP      r4,#8                 ;222
000106  d3ce              BCC      |L6.166|
;;;244            }
;;;245          }
;;;246        }
;;;247        GPIOx->CRH = tmpreg;
000108  6046              STR      r6,[r0,#4]
                  |L6.266|
;;;248      }
;;;249    }
00010a  bdf0              POP      {r4-r7,pc}
;;;250    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;426      */
;;;427    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  f44f3280          MOV      r2,#0x10000
;;;428    {
;;;429      uint32_t tmp = 0x00010000;
;;;430      
;;;431      /* Check the parameters */
;;;432      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;433      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;434      
;;;435      tmp |= GPIO_Pin;
000004  430a              ORRS     r2,r2,r1
;;;436      /* Set LCKK bit */
;;;437      GPIOx->LCKR = tmp;
000006  6182              STR      r2,[r0,#0x18]
;;;438      /* Reset LCKK bit */
;;;439      GPIOx->LCKR =  GPIO_Pin;
000008  6181              STR      r1,[r0,#0x18]
;;;440      /* Set LCKK bit */
;;;441      GPIOx->LCKR = tmp;
00000a  6182              STR      r2,[r0,#0x18]
;;;442      /* Read LCKK bit*/
;;;443      tmp = GPIOx->LCKR;
00000c  6982              LDR      r2,[r0,#0x18]
;;;444      /* Read LCKK bit*/
;;;445      tmp = GPIOx->LCKR;
00000e  6982              LDR      r2,[r0,#0x18]
;;;446    }
000010  4770              BX       lr
;;;447    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;519      */
;;;520    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;521    {
;;;522      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
000002  2200              MOVS     r2,#0
000004  2300              MOVS     r3,#0
000006  2500              MOVS     r5,#0
000008  2400              MOVS     r4,#0
;;;523      /* Check the parameters */
;;;524      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;525      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;526      
;;;527      tmpreg = AFIO->MAPR;
00000a  4e17              LDR      r6,|L8.104|
00000c  6875              LDR      r5,[r6,#4]
;;;528      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
00000e  f3c04403          UBFX     r4,r0,#16,#4
;;;529      tmp = GPIO_Remap & LSB_MASK;
000012  b282              UXTH     r2,r0
;;;530      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
000014  f4001640          AND      r6,r0,#0x300000
000018  f5b61f40          CMP      r6,#0x300000
00001c  d108              BNE      |L8.48|
;;;531      {
;;;532        tmpreg &= DBGAFR_SWJCFG_MASK;
00001e  f0256570          BIC      r5,r5,#0xf000000
;;;533        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
000022  4e11              LDR      r6,|L8.104|
000024  6876              LDR      r6,[r6,#4]
000026  f0266670          BIC      r6,r6,#0xf000000
00002a  4f0f              LDR      r7,|L8.104|
00002c  607e              STR      r6,[r7,#4]
00002e  e012              B        |L8.86|
                  |L8.48|
;;;534      }
;;;535      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
000030  f4001680          AND      r6,r0,#0x100000
000034  f5b61f80          CMP      r6,#0x100000
000038  d106              BNE      |L8.72|
;;;536      {
;;;537        tmp1 = ((uint32_t)0x03) << tmpmask;
00003a  2603              MOVS     r6,#3
00003c  fa06f304          LSL      r3,r6,r4
;;;538        tmpreg &= ~tmp1;
000040  439d              BICS     r5,r5,r3
;;;539        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000042  f0456570          ORR      r5,r5,#0xf000000
000046  e006              B        |L8.86|
                  |L8.72|
;;;540      }
;;;541      else
;;;542      {
;;;543        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
000048  0d46              LSRS     r6,r0,#21
00004a  0136              LSLS     r6,r6,#4
00004c  fa02f606          LSL      r6,r2,r6
000050  43b5              BICS     r5,r5,r6
;;;544        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000052  f0456570          ORR      r5,r5,#0xf000000
                  |L8.86|
;;;545      }
;;;546      if (NewState != DISABLE)
000056  b121              CBZ      r1,|L8.98|
;;;547      {
;;;548        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
000058  0d46              LSRS     r6,r0,#21
00005a  0136              LSLS     r6,r6,#4
00005c  fa02f606          LSL      r6,r2,r6
000060  4335              ORRS     r5,r5,r6
                  |L8.98|
;;;549      }
;;;550      AFIO->MAPR = tmpreg;
000062  4e01              LDR      r6,|L8.104|
000064  6075              STR      r5,[r6,#4]
;;;551    }
000066  bdf0              POP      {r4-r7,pc}
;;;552    
                          ENDP

                  |L8.104|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;295      */
;;;296    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;297    {
;;;298      /* Check the parameters */
;;;299      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;300      
;;;301      return ((uint16_t)GPIOx->IDR);
000002  6888              LDR      r0,[r1,#8]
000004  b280              UXTH     r0,r0
;;;302    }
000006  4770              BX       lr
;;;303    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;271      */
;;;272    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;273    {
;;;274      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;275      
;;;276      /* Check the parameters */
;;;277      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;278      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;279      
;;;280      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6893              LDR      r3,[r2,#8]
000006  420b              TST      r3,r1
000008  d001              BEQ      |L10.14|
;;;281      {
;;;282        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L10.16|
                  |L10.14|
;;;283      }
;;;284      else
;;;285      {
;;;286        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L10.16|
;;;287      }
;;;288      return bitstatus;
;;;289    }
000010  4770              BX       lr
;;;290    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;333      */
;;;334    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;335    {
;;;336      /* Check the parameters */
;;;337      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;338        
;;;339      return ((uint16_t)GPIOx->ODR);
000002  68c8              LDR      r0,[r1,#0xc]
000004  b280              UXTH     r0,r0
;;;340    }
000006  4770              BX       lr
;;;341    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;310      */
;;;311    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;312    {
;;;313      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;314      /* Check the parameters */
;;;315      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;316      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;317      
;;;318      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  68d3              LDR      r3,[r2,#0xc]
000006  420b              TST      r3,r1
000008  d001              BEQ      |L12.14|
;;;319      {
;;;320        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L12.16|
                  |L12.14|
;;;321      }
;;;322      else
;;;323      {
;;;324        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L12.16|
;;;325      }
;;;326      return bitstatus;
;;;327    }
000010  4770              BX       lr
;;;328    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;366      */
;;;367    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;368    {
;;;369      /* Check the parameters */
;;;370      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;371      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;372      
;;;373      GPIOx->BRR = GPIO_Pin;
;;;374    }
000002  4770              BX       lr
;;;375    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;349      */
;;;350    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;351    {
;;;352      /* Check the parameters */
;;;353      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;354      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;355      
;;;356      GPIOx->BSRR = GPIO_Pin;
;;;357    }
000002  4770              BX       lr
;;;358    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;256      */
;;;257    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;258    {
;;;259      /* Reset GPIO init structure parameters values */
;;;260      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;261      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;262      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;263    }
00000e  4770              BX       lr
;;;264    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;410      */
;;;411    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;412    {
;;;413      /* Check the parameters */
;;;414      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;415      
;;;416      GPIOx->ODR = PortVal;
;;;417    }
000002  4770              BX       lr
;;;418    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;386      */
;;;387    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L17.6|
;;;388    {
;;;389      /* Check the parameters */
;;;390      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;391      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;392      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;393      
;;;394      if (BitVal != Bit_RESET)
;;;395      {
;;;396        GPIOx->BSRR = GPIO_Pin;
000002  6101              STR      r1,[r0,#0x10]
000004  e000              B        |L17.8|
                  |L17.6|
;;;397      }
;;;398      else
;;;399      {
;;;400        GPIOx->BRR = GPIO_Pin;
000006  6141              STR      r1,[r0,#0x14]
                  |L17.8|
;;;401      }
;;;402    }
000008  4770              BX       lr
;;;403    
                          ENDP

