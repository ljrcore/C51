


<html>

<head>
<title>CETINet 中国电子技术信息网---综合文章---编程规范与范例(3)</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
</head>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="stylesheet" href="style.css" type="text/css">
<style type="text/css">body         { scrollbar-face-color: 5B9595; scrollbar-shadow-color: ffffff; 
               scrollbar-highlight-color: ffffff; scrollbar-3dlight-color: 
               ffffff; scrollbar-darkshadow-color: ffffff; 
               scrollbar-track-color: ffffff; scrollbar-arrow-color: ffffff }
</style>
</head>

<body bgcolor="#F3F3F3" text="#000000">

<div align="center">
  <table width="750" border="0" height="60" cellspacing="0" cellpadding="0">
    <tr>
      <td width="150">
        <div align="center">
          <img border="0" src="images/myad.gif">
         </div>
      </td>
      <td width="450">
        <div align="center">
         <a href="images/ad1.asp" target="_blank"><img border="0" src="images/ad1.gif"></a>
        </div>
      </td>
      <td width="150">
        <div align="center">
        <a href="images/adsmall.asp" target="_blank"><img border="0" src="images/adsmall.gif"></a>
        </div>
      </td>
    </tr>
  </table>
  <br>
  <table width="750" border="0" cellspacing="0" cellpadding="0" height="20">
    <tr>
      <td width="57" bgcolor="#5B9595" align="center"><font color="#FFFFFF">其他栏目</font></td>
      <td width="57" bgcolor="#D7E3E3" align="center"><a href="../bbs/index.asp" target="_blank">技术论坛</a></td>
      <td width="57" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=1" target="_blank">微控制器</a></td>
      <td width="57" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=2" target="_blank">IC设计</a></td>
      <td bgcolor="#D7E3E3" align="center" width="58"><a href="../t_article/index.asp?topid=3" target="_blank">EDA技术</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=4" target="_blank">电路基础</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=5" target="_blank">电源技术</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=6" target="_blank">通信技术</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=7" target="_blank">测试测量</a></td>
      <td bgcolor="#D7E3E3" align="center" width="58"><a href="../t_article/index.asp?topid=8" target="_blank">综合技术</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=9" target="_blank">编程学堂</a></td>
      <td width="58" bgcolor="#D7E3E3" align="center"><a href="../t_article/index.asp?topid=10" target="_blank">版主专栏</a></td>
      <td bgcolor="#D7E3E3" width="58" align="center"><a href="../download/Default.asp" target="_blank">下载中心</a></td>
    </tr>
  </table>
  <br>
</div>

</body>

<body bgcolor="#F3F3F3" text="#000000">

<div align="center">
  <table width="750" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td>您目前的位置：<a href=index.asp?topid=9>编程学堂</a> - <a href=step.asp?topid=9&topname=编程学堂&typeid=106&typename=综合文章>综合文章</a> - 编程规范与范例(3)</td>       
    </tr>
  </table>
  <table width="750" border="0" cellspacing="0" cellpadding="0" height="250">
    <tr>
      <td width="150" valign="top" bgcolor="#5B9595" height="240">
        <table width="150" border="0" cellspacing="0">
          <tr>
            <td height="20"></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">文章类别：</font></td>
          </tr>
          <tr>
            <td height="20">
              <p align="center"><font color="#F3F3F3">综合文章</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">文章来源：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">未知</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">文章作者：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">未知</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">关 键 字：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">规范</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">今天阅读：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">2</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">总共阅读：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">798</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#FFFFFF">加入日期：</font></td>
          </tr>
          <tr>
            <td height="20"><font color="#F3F3F3">
              <p align="center">2004-3-20 18:39:28</font></td>
          </tr>
        </table>
        <table width="150" border="0" cellspacing="0">
          <tr>
            <td height="20">
                <font color="#FFFFFF">相关文章：</font>
            </td>
          </tr>
          <tr>
            <td height="20">
              <div align="center">
                <a href=list.asp?indexid=1811><font color='#FFFFFF'>编程规范与范例(6)</font></a><br><a href=list.asp?indexid=1810><font color='#FFFFFF'>编程规范与范例(5)</font></a><br><a href=list.asp?indexid=1809><font color='#FFFFFF'>编程规范与范例(4)</font></a><br><a href=list.asp?indexid=1807><font color='#FFFFFF'>编程规范与范例(2)</font></a><br><a href=list.asp?indexid=1800><font color='#FFFFFF'>编程规范与范例(1)</font></a><br><a href=list.asp?indexid=1479><font color='#FFFFFF'>NUXAS代码风格规范</font></a><br><a href=list.asp?indexid=1461><font color='#FFFFFF'>C语言编程规范</font></a><br><a href=list.asp?indexid=706><font color='#FFFFFF'>电路板最新国际规范导读</font></a><br><a href=list.asp?indexid=633><font color='#FFFFFF'>改进电路设计规程提高可测试性</font></a><br><a href=list.asp?indexid=632><font color='#FFFFFF'>PCB全面质量管理</font></a><br>
              </div>
            </td>
          </tr>
        </table>
        <table width="150" border="0" cellspacing="0">
          <tr>
            <td height="20"></td>
          </tr>
          <tr>
            <td height="20">
              <p align="center"><font color="#FFFFFF">==关于文章版权==</font></td>
          </tr>
		  <tr>
            <td height="20"><font color="#FFFFFF"><br>
              “本站”本站站主原创文章，未经本人（帝国老手/aoe）许可其他媒体一律不得转载。<br><br>
              “本站整理”本站站主根据个人见解及他人经验总结整理的文章，其他媒体转载必须标明出处为我站。<br><br>
              “某单位或个人”全文转载来自网络上的文章，其他媒体转载与我站无关。<br><br>
              “未知”（1）来自网络，由于来源混乱，无从考证作者，其他媒体转载与我站无关。<br><br>
              “未知”（2）其文章也是本站站主原创的，只所以标注“未知”，主要是因为引用文字过多或其他原因。建议其他媒体转载标明出处为我站。<br><br>
              我站版权请标注：“www.cetinet.com”或“中国电子技术信息网”字样。</font></td>
          </tr>
          <tr>
            <td height="20"></td>
          </tr>
		</table>
      </td>
      <td width="600" valign="top" height="240">
        <table width="600" border="0" cellspacing="0" cellpadding="0" height="20">
          <tr>
            <td bgcolor="#5B9595">&nbsp;</td>
          </tr>
        </table>
        <table width="600" border="0" cellspacing="3" cellpadding="0">
          <tr>
            <td height="20" bgcolor="#AECECE">
              <div align="center">
                <font color="#0A52D8"><b>编程规范与范例(3)</b></font>
              </div>
            </td>
          </tr>
          <tr>
            <td width="600">〖文章转载或出处〗≡中国电子技术信息网≡ 网址：www.CETINet.com</td>  
          </tr>
          <tr>
            <td width="600">编程规范与范例(3)<br>
<br>
目&nbsp;&nbsp;录<br>
1&nbsp;排版&nbsp;6<br>
2&nbsp;注释&nbsp;11<br>
3&nbsp;标识符命名&nbsp;18<br>
4&nbsp;可读性&nbsp;20<br>
5&nbsp;变量、结构&nbsp;22<br>
6&nbsp;函数、过程&nbsp;28<br>
7&nbsp;可测性&nbsp;36<br>
8&nbsp;程序效率&nbsp;40<br>
9&nbsp;质量保证&nbsp;44<br>
10&nbsp;代码编辑、编译、审查&nbsp;50<br>
11&nbsp;代码测试、维护&nbsp;52<br>
12&nbsp;宏&nbsp;53<br>
<br>
<br>
6&nbsp;函数、过程<br>
&amp;sup1;&nbsp;6-1：对所调用函数的错误返回码要仔细、全面地处理。<br>
&amp;sup1;&nbsp;6-2：明确函数功能，精确（而不是近似）地实现函数设计。<br>
&amp;sup1;&nbsp;6-3：编写可重入函数时，应注意局部变量的使用（如编写C/C++语言的可重入函数时，应使用auto即缺省态局部变量或寄存器变量）。<br>
说明：编写C/C++语言的可重入函数时，不应使用static局部变量，否则必须经过特殊处理，才能使函数具有可重入性。<br>
&amp;sup1;&nbsp;6-4：编写可重入函数时，若使用全局变量，则应通过关中断、信号量（即P、V操作）等手段对其加以保护。<br>
说明：若对所使用的全局变量不加以保护，则此函数就不具有可重入性，即当多个进程调用此函数时，很有可能使有关全局变量变为不可知状态。<br>
示例：假设Exam是int型全局变量，函数Squre_Exam返回Exam平方值。那么如下函数不具有可重入性。<br>
unsigned&nbsp;int&nbsp;example(&nbsp;int&nbsp;para&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;int&nbsp;temp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;Exam&nbsp;=&nbsp;para;&nbsp;//&nbsp;（**）<br>
&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;Square_Exam(&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;temp;<br>
}<br>
<br>
此函数若被多个进程调用的话，其结果可能是未知的，因为当（**）语句刚执行完后，另外一个使用本函数的进程可能正好被激活，那么当新激活的进程执行到此函数时，将使Exam赋与另一个不同的para值，所以当控制重新回到“temp&nbsp;=&nbsp;Square_Exam(&nbsp;)”后，计算出的temp很可能不是预想中的结果。此函数应如下改进。<br>
unsigned&nbsp;int&nbsp;example(&nbsp;int&nbsp;para&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;int&nbsp;temp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;[申请信号量操作]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;若申请不到“信号量”，说明另外的进程正处于<br>
&nbsp;&nbsp;&nbsp;&nbsp;Exam&nbsp;=&nbsp;para;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;给Exam赋值并计算其平方过程中（即正在使用此<br>
&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;Square_Exam(&nbsp;);&nbsp;&nbsp;//&nbsp;信号），本进程必须等待其释放信号后，才可继<br>
&nbsp;&nbsp;&nbsp;&nbsp;[释放信号量操作]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;续执行。若申请到信号，则可继续执行，但其<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;它进程必须等待本进程释放信号量后，才能再使<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;用本信号。<br>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;temp;<br>
}<br>
&amp;sup1;&nbsp;6-5：在同一项目组应明确规定对接口函数参数的合法性检查应由函数的调用者负责还是由接口函数本身负责，缺省是由函数调用者负责。<br>
说明：对于模块间接口函数的参数的合法性检查这一问题，往往有两个极端现象，即：要么是调用者和被调用者对参数均不作合法性检查，结果就遗漏了合法性检查这一必要的处理过程，造成问题隐患；要么就是调用者和被调用者均对参数进行合法性检查，这种情况虽不会造成问题，但产生了冗余代码，降低了效率。<br>
&amp;frac12;&nbsp;6-1：防止将函数的参数作为工作变量。<br>
说明：将函数的参数作为工作变量，有可能错误地改变参数内容，所以很危险。对必须改变的参数，最好先用局部变量代之，最后再将该局部变量的内容赋给该参数。<br>
示例：下函数的实现不太好。<br>
void&nbsp;sum_data(&nbsp;unsigned&nbsp;int&nbsp;num,&nbsp;int&nbsp;*data,&nbsp;int&nbsp;*sum&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;int&nbsp;count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*sum&nbsp;=&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(count&nbsp;=&nbsp;0;&nbsp;count&nbsp;&lt;&nbsp;num;&nbsp;count++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*sum&nbsp;&nbsp;+=&nbsp;data[count];&nbsp;//&nbsp;sum成了工作变量，不太好。<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
<br>
若改为如下，则更好些。<br>
void&nbsp;sum_data(&nbsp;unsigned&nbsp;int&nbsp;num,&nbsp;int&nbsp;*data,&nbsp;int&nbsp;*sum&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;int&nbsp;count&nbsp;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;sum_temp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;sum_temp&nbsp;=&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(count&nbsp;=&nbsp;0;&nbsp;count&nbsp;&lt;&nbsp;num;&nbsp;count&nbsp;++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum_temp&nbsp;&nbsp;+=&nbsp;data[count];&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*sum&nbsp;=&nbsp;sum_temp;<br>
}<br>
&amp;frac12;&nbsp;6-2：函数的规模尽量限制在200行以内。<br>
说明：不包括注释和空格行。<br>
&amp;frac12;&nbsp;6-3：一个函数仅完成一件功能。<br>
&amp;frac12;&nbsp;6-4：为简单功能编写函数。<br>
说明：虽然为仅用一两行就可完成的功能去编函数好象没有必要，但用函数可使功能明确化，增加程序可读性，亦可方便维护、测试。<br>
示例：如下语句的功能不很明显。<br>
value&nbsp;=&nbsp;(&nbsp;a&nbsp;&gt;&nbsp;b&nbsp;)&nbsp;?&nbsp;a&nbsp;:&nbsp;b&nbsp;;<br>
<br>
改为如下就很清晰了。<br>
int&nbsp;max&nbsp;(int&nbsp;a,&nbsp;int&nbsp;b)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;((a&nbsp;&gt;&nbsp;b)&nbsp;?&nbsp;a&nbsp;:&nbsp;b);<br>
}<br>
<br>
value&nbsp;=&nbsp;max&nbsp;(a,&nbsp;b);<br>
<br>
或改为如下。<br>
#define&nbsp;MAX&nbsp;(a,&nbsp;b)&nbsp;(((a)&nbsp;&gt;&nbsp;(b))&nbsp;?&nbsp;(a)&nbsp;:&nbsp;(b))<br>
<br>
value&nbsp;=&nbsp;MAX&nbsp;(a,&nbsp;b);<br>
&amp;frac12;&nbsp;6-5：不要设计多用途面面俱到的函数。<br>
说明：多功能集于一身的函数，很可能使函数的理解、测试、维护等变得困难。<br>
&amp;frac12;&nbsp;6-6：函数的功能应该是可以预测的，也就是只要输入数据相同就应产生同样的输出。<br>
说明：带有内部“存储器”的函数的功能可能是不可预测的，因为它的输出可能取决于内部存储器（如某标记）的状态。这样的函数既不易于理解又不利于测试和维护。在C/C++语言中，函数的static局部变量是函数的内部存储器，有可能使函数的功能不可预测，然而，当某函数的返回值为指针类型时，则必须是STATIC的局部变量的地址作为返回值，若为AUTO类，则返回为错针。<br>
示例：如下函数，其返回值（即功能）是不可预测的。<br>
unsigned&nbsp;int&nbsp;integer_sum(&nbsp;unsigned&nbsp;int&nbsp;base&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;int&nbsp;index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;unsigned&nbsp;int&nbsp;sum&nbsp;=&nbsp;0;&nbsp;//&nbsp;注意，是static类型的。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;若改为auto类型，则函数即变为可预测。<br>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(index&nbsp;=&nbsp;1;&nbsp;index&nbsp;&lt;=&nbsp;base;&nbsp;index++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sum;<br>
}<br>
&amp;frac12;&nbsp;6-7：尽量不要编写依赖于其他函数内部实现的函数。<br>
说明：此条为函数独立性的基本要求。由于目前大部分高级语言都是结构化的，所以通过具体语言的语法要求与编译器功能，基本就可以防止这种情况发生。但在汇编语言中，由于其灵活性，很可能使函数出现这种情况。<br>
示例：如下是在DOS下TASM的汇编程序例子。过程Print_Msg的实现依赖于Input_Msg的具体实现，这种程序是非结构化的，难以维护、修改。<br>
...&nbsp;&nbsp;//&nbsp;程序代码<br>
proc&nbsp;Print_Msg&nbsp;//&nbsp;过程（函数）Print_Msg<br>
&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;//&nbsp;程序代码<br>
&nbsp;&nbsp;&nbsp;&nbsp;jmp&nbsp;&nbsp;LABEL<br>
&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;//&nbsp;程序代码<br>
endp<br>
<br>
proc&nbsp;Input_Msg&nbsp;//&nbsp;过程（函数）Input_Msg<br>
&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;//&nbsp;程序代码<br>
LABEL:<br>
&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;//&nbsp;程序代码<br>
endp<br>
&amp;frac12;&nbsp;6-8：避免设计多参数函数，不使用的参数从接口中去掉。<br>
说明：目的减少函数间接口的复杂度。<br>
&amp;frac12;&nbsp;6-9：非调度函数应减少或防止控制参数，尽量只使用数据参数。<br>
说明：本建议目的是防止函数间的控制耦合。调度函数是指根据输入的消息类型或控制命令，来启动相应的功能实体（即函数或过程），而本身并不完成具体功能。控制参数是指改变函数功能行为的参数，即函数要根据此参数来决定具体怎样工作。非调度函数的控制参数增加了函数间的控制耦合，很可能使函数间的耦合度增大，并使函数的功能不唯一。<br>
示例：如下函数构造不太合理。<br>
int&nbsp;add_sub(&nbsp;int&nbsp;a,&nbsp;int&nbsp;b,&nbsp;unsigned&nbsp;char&nbsp;add_sub_flg&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(add_sub_flg&nbsp;==&nbsp;INTEGER_ADD)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(a&nbsp;+&nbsp;b);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(a&nbsp;&nbsp;&nbsp;b);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
<br>
不如分为如下两个函数清晰。<br>
int&nbsp;add(&nbsp;int&nbsp;a,&nbsp;int&nbsp;b&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(a&nbsp;+&nbsp;b);<br>
}<br>
<br>
int&nbsp;sub(&nbsp;int&nbsp;a,&nbsp;int&nbsp;b&nbsp;)&nbsp;<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(a&nbsp;&nbsp;&nbsp;b);<br>
}<br>
&amp;frac12;&nbsp;6-10：检查函数所有参数输入的有效性。<br>
&amp;frac12;&nbsp;6-11：检查函数所有非参数输入的有效性，如数据文件、公共变量等。<br>
说明：函数的输入主要有两种：一种是参数输入；另一种是全局变量、数据文件的输入，即非参数输入。函数在使用输入之前，应进行必要的检查。<br>
&amp;frac12;&nbsp;6-12：函数名应准确描述函数的功能。<br>
&amp;frac12;&nbsp;6-13：使用动宾词组为执行某操作的函数命名。如果是OOP方法，可以只有动词（名词是对象本身）。<br>
示例：参照如下方式命名函数。<br>
void&nbsp;print_record(&nbsp;unsigned&nbsp;int&nbsp;rec_ind&nbsp;)&nbsp;;<br>
int&nbsp;&nbsp;input_record(&nbsp;void&nbsp;)&nbsp;;<br>
unsigned&nbsp;char&nbsp;get_current_color(&nbsp;void&nbsp;)&nbsp;;<br>
建议6-14：避免使用无意义或含义不清的动词为函数命名。<br>
说明：避免用含义不清的动词如process、handle等为函数命名，因为这些动词并没有说明要具体做什么。<br>
建议6-15：函数的返回值要清楚、明了，让使用者不容易忽视错误情况。<br>
说明：函数的每种出错返回值的意义要清晰、明了、准确，防止使用者误用、理解错误或忽视错误返回码。<br>
&amp;frac12;&nbsp;6-16：除非必要，最好不要把与函数返回值类型不同的变量，以编译系统默认的转换方式或强制的转换方式作为返回值返回。<br>
&amp;frac12;&nbsp;6-17：让函数在调用点显得易懂、容易理解。<br>
&amp;frac12;&nbsp;6-18：在调用函数填写参数时，应尽量减少没有必要的默认数据类型转换或强制数据类型转换。<br>
说明：因为数据类型转换或多或少存在危险。<br>
&amp;frac12;&nbsp;6-19：避免函数中不必要语句，防止程序中的垃圾代码。<br>
说明：程序中的垃圾代码不仅占用额外的空间，而且还常常影响程序的功能与性能，很可能给程序的测试、维护等造成不必要的麻烦。<br>
&amp;frac12;&nbsp;6-20：防止把没有关联的语句放到一个函数中。<br>
说明：防止函数或过程内出现随机内聚。随机内聚是指将没有关联或关联很弱的语句放到同一个函数或过程中。随机内聚给函数或过程的维护、测试及以后的升级等造成了不便，同时也使函数或过程的功能不明确。使用随机内聚函数，常常容易出现在一种应用场合需要改进此函数，而另一种应用场合又不允许这种改进，从而陷入困境。<br>
在编程时，经常遇到在不同函数中使用相同的代码，许多开发人员都愿把这些代码提出来，并构成一个新函数。若这些代码关联较大并且是完成一个功能的，那么这种构造是合理的，否则这种构造将产生随机内聚的函数。<br>
示例：如下函数就是一种随机内聚。<br>
void&nbsp;Init_Var(&nbsp;void&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;Rect.length&nbsp;=&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Rect.width&nbsp;=&nbsp;0;&nbsp;/*&nbsp;初始化矩形的长与宽&nbsp;*/<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Point.x&nbsp;=&nbsp;10;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Point.y&nbsp;=&nbsp;10;&nbsp;&nbsp;&nbsp;/*&nbsp;初始化“点”的坐标&nbsp;*/<br>
}<br>
<br>
矩形的长、宽与点的坐标基本没有任何关系，故以上函数是随机内聚。<br>
应如下分为两个函数：<br>
void&nbsp;Init_Rect(&nbsp;void&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;Rect.length&nbsp;=&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Rect.width&nbsp;=&nbsp;0;&nbsp;/*&nbsp;初始化矩形的长与宽&nbsp;*/<br>
}<br>
<br>
void&nbsp;Init_Point(&nbsp;void&nbsp;)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;Point.x&nbsp;=&nbsp;10;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Point.y&nbsp;=&nbsp;10;&nbsp;&nbsp;&nbsp;/*&nbsp;初始化“点”的坐标&nbsp;*/<br>
}<br>
&amp;frac12;&nbsp;6-21：如果多段代码重复做同一件事情，那么在函数的划分上可能存在问题。<br>
说明：若此段代码各语句之间有实质性关联并且是完成同一件功能的，那么可考虑把此段代码构造成一个新的函数。<br>
&amp;frac12;&nbsp;6-22：功能不明确较小的函数，特别是仅有一个上级函数调用它时，应考虑把它合并到上级函数中，而不必单独存在。<br>
说明：模块中函数划分的过多，一般会使函数间的接口变得复杂。所以过小的函数，特别是扇入很低的或功能不明确的函数，不值得单独存在。<br>
&amp;frac12;&nbsp;6-23：设计高扇入、合理扇出（小于7）的函数。<br>
说明：扇出是指一个函数直接调用（控制）其它函数的数目，而扇入是指有多少上级函数调用它。<br>
扇出过大，表明函数过分复杂，需要控制和协调过多的下级函数；而扇出过小，如总是1，表明函数的调用层次可能过多，这样不利程序阅读和函数结构的分析，并且程序运行时会对系统资源如堆栈空间等造成压力。函数较合理的扇出（调度函数除外）通常是3-5。扇出太大，一般是由于缺乏中间层次，可适当增加中间层次的函数。扇出太小，可把下级函数进一步分解多个函数，或合并到上级函数中。当然分解或合并函数时，不能改变要实现的功能，也不能违背函数间的独立性。<br>
扇入越大，表明使用此函数的上级函数越多，这样的函数使用效率高，但不能违背函数间的独立性而单纯地追求高扇入。公共模块中的函数及底层函数应该有较高的扇入。<br>
较良好的软件结构通常是顶层函数的扇出较高，中层函数的扇出较少，而底层函数则扇入到公共模块中。<br>
&amp;frac12;&nbsp;6-24：减少函数本身或函数间的递归调用。<br>
说明：递归调用特别是函数间的递归调用（如A-&gt;B-&gt;C-&gt;A），影响程序的可理解性；递归调用一般都占用较多的系统资源（如栈空间）；递归调用对程序的测试有一定影响。故除非为某些算法或功能的实现方便，应减少没必要的递归调用。<br>
&amp;frac12;&nbsp;6-25：仔细分析模块的功能及性能需求，并进一步细分，同时若有必要画出有关数据流图，据此来进行模块的函数划分与组织。<br>
说明：函数的划分与组织是模块的实现过程中很关键的步骤，如何划分出合理的函数结构，关系到模块的最终效率和可维护性、可测性等。根据模块的功能图或/及数据流图映射出函数结构是常用方法之一。<br>
&amp;frac12;&nbsp;6-26：改进模块中函数的结构，降低函数间的耦合度，并提高函数的独立性以及代码可读性、效率和可维护性。优化函数结构时，要遵守以下原则：<br>
（1）不能影响模块功能的实现。<br>
（2）仔细考查模块或函数出错处理及模块的性能要求并进行完善。<br>
（3）通过分解或合并函数来改进软件结构。<br>
（4）考查函数的规模，过大的要进行分解。<br>
（5）降低函数间接口的复杂度。<br>
（6）不同层次的函数调用要有较合理的扇入、扇出。<br>
（7）函数功能应可预测。<br>
（8）提高函数内聚。（单一功能的函数内聚最高）<br>
说明：对初步划分后的函数结构应进行改进、优化，使之更为合理。<br>
&amp;frac12;&nbsp;6-27：在多任务操作系统的环境下编程，要注意函数可重入性的构造。<br>
说明：可重入性是指函数可以被多个任务进程调用。在多任务操作系统中，函数是否具有可重入性是非常重要的，因为这是多个进程可以共用此函数的必要条件。另外，编译器是否提供可重入函数库，与它所服务的操作系统有关，只有操作系统是多任务时，编译器才有可能提供可重入函数库。如DOS下BC和MSC等就不具备可重入函数库，因为DOS是单用户单任务操作系统。<br>
&amp;frac12;&nbsp;6-28：避免使用BOOL参数。<br>
说明：原因有二，其一是BOOL参数值无意义，TURE/FALSE的含义是非常模糊的，在调用时很难知道该参数到底传达的是什么意思；其二是BOOL参数值不利于扩充。还有NULL也是一个无意义的单词。<br>
&amp;frac12;&nbsp;6-29：&nbsp;对于提供了返回值的函数，在引用时最好使用其返回值。<br>
&amp;frac12;&nbsp;6-30：当一个过程（函数）中对较长变量（一般是结构的成员）有较多引用时，可以用一个意义相当的宏代替。&nbsp;<br>
说明：这样可以增加编程效率和程序的可读性。<br>
示例：在某过程中较多引用TheReceiveBuffer[FirstSocket].byDataPtr，<br>
则可以通过以下宏定义来代替：<br>
#&nbsp;define&nbsp;pSOCKDATA&nbsp;TheReceiveBuffer[FirstScoket].byDataPtr</td> 
          </tr>
          <tr>
            <td width="600"></td> 
          </tr>
		  <tr>
            <td width="600"><b>郑重声明</b><br>
              &nbsp;&nbsp; 近年来我站数百篇“原创文章”被一些媒体肆意转载，不但不标明出自“中国电子技术信息网”，而且把相关字眼删除！这是无视技术价值的盗窃行为，是对技术人员辛勤劳动的蔑视，我对此种行为表示强烈的谴责。<br>
              &nbsp;&nbsp; “本是同根生，相煎何太急”，考虑到我们做技术的都是同门兄弟，对以前的盗窃行为不再追究，今后再有此类事件，最低处理限度是“明示于天下”。在这里向转载过又标注了出处的兄弟媒体表示崇高的敬意！<br>
              &nbsp;&nbsp; 兄弟网站如果引用本站“原创文章”，请首先经本人许可，并标注“www.cetinet.com”或“中国电子技术信息网”字样。<br>
              &nbsp;&nbsp; 欢迎个人下载使用！</td> 
          </tr>
        </table>
      </td>
    </tr>
  </table>
  <br>
  <br>
</div>

</body>
<body bgcolor="#FFFFFF" text="#000000">
  <p align="center">
  本站所载文章力求原创，部分资料转自网上，假如您认为某些文章侵犯了您的权益，<br>
  请告知我们，我们将在最短的时间内删除有关文章。本站转载文章均注明出处。<br>
  兄弟网站如果转载本站文章请注明本站版权，谢谢！
  <p align="center">中国电子技术信息网 文章管理系统由：Aoe 制作<br>      
  Copyright (C) 2001-2004 CETINet.COM All Rights Reserved      
</body>    

</html>

