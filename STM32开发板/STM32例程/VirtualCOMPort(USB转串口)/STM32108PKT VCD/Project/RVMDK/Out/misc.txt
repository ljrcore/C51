; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Out\misc.o --depend=.\Out\misc.d --device=DARMSTM --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Core\CM3 -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I"D:\Program Files\KeilARM350\ARM\INC\ST\STM32F10x" ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;112      */
;;;113    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;114    {
;;;115      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
000002  2100              MOVS     r1,#0
000004  2300              MOVS     r3,#0
000006  220f              MOVS     r2,#0xf
;;;116      
;;;117      /* Check the parameters */
;;;118      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;119      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;120      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;121        
;;;122      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000008  78c4              LDRB     r4,[r0,#3]
00000a  b30c              CBZ      r4,|L1.80|
;;;123      {
;;;124        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;125        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
00000c  4c16              LDR      r4,|L1.104|
00000e  6824              LDR      r4,[r4,#0]
000010  f40464e0          AND      r4,r4,#0x700
000014  f5c464e0          RSB      r4,r4,#0x700
000018  0a21              LSRS     r1,r4,#8
;;;126        tmppre = (0x4 - tmppriority);
00001a  f1c10304          RSB      r3,r1,#4
;;;127        tmpsub = tmpsub >> tmppriority;
00001e  40ca              LSRS     r2,r2,r1
;;;128    
;;;129        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
000020  7844              LDRB     r4,[r0,#1]
000022  fa04f103          LSL      r1,r4,r3
;;;130        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
000026  7884              LDRB     r4,[r0,#2]
000028  4014              ANDS     r4,r4,r2
00002a  4321              ORRS     r1,r1,r4
;;;131        tmppriority = tmppriority << 0x04;
00002c  0109              LSLS     r1,r1,#4
;;;132            
;;;133        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
00002e  4c0f              LDR      r4,|L1.108|
000030  7806              LDRB     r6,[r0,#0]
000032  55a1              STRB     r1,[r4,r6]
;;;134        
;;;135        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;136        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000034  7804              LDRB     r4,[r0,#0]
000036  f004051f          AND      r5,r4,#0x1f
00003a  2401              MOVS     r4,#1
00003c  40ac              LSLS     r4,r4,r5
00003e  7805              LDRB     r5,[r0,#0]
000040  116d              ASRS     r5,r5,#5
000042  f04f26e0          MOV      r6,#0xe000e000
000046  eb060585          ADD      r5,r6,r5,LSL #2
00004a  f8c54100          STR      r4,[r5,#0x100]
00004e  e009              B        |L1.100|
                  |L1.80|
;;;137          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;138      }
;;;139      else
;;;140      {
;;;141        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;142        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000050  7804              LDRB     r4,[r0,#0]
000052  f004041f          AND      r4,r4,#0x1f
000056  2501              MOVS     r5,#1
000058  40a5              LSLS     r5,r5,r4
00005a  4c05              LDR      r4,|L1.112|
00005c  7806              LDRB     r6,[r0,#0]
00005e  1176              ASRS     r6,r6,#5
000060  f8445026          STR      r5,[r4,r6,LSL #2]
                  |L1.100|
;;;143          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;144      }
;;;145    }
000064  bd70              POP      {r4-r6,pc}
;;;146    
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
                          DCD      0xe000ed0c
                  |L1.108|
                          DCD      0xe000e400
                  |L1.112|
                          DCD      0xe000e180

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;95       */
;;;96     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4902              LDR      r1,|L2.12|
;;;97     {
;;;98       /* Check the parameters */
;;;99       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;100      
;;;101      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;102      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4301              ORRS     r1,r1,r0
000004  4a02              LDR      r2,|L2.16|
000006  6011              STR      r1,[r2,#0]
;;;103    }
000008  4770              BX       lr
;;;104    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x05fa0000
                  |L2.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;157      */
;;;158    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  4a02              LDR      r2,|L3.12|
;;;159    { 
;;;160      /* Check the parameters */
;;;161      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;162      assert_param(IS_NVIC_OFFSET(Offset));  
;;;163       
;;;164      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000002  400a              ANDS     r2,r2,r1
000004  4302              ORRS     r2,r2,r0
000006  4b02              LDR      r3,|L3.16|
000008  601a              STR      r2,[r3,#0]
;;;165    }
00000a  4770              BX       lr
;;;166    
                          ENDP

                  |L3.12|
                          DCD      0x1fffff80
                  |L3.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;178      */
;;;179    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  b139              CBZ      r1,|L4.18|
;;;180    {
;;;181      /* Check the parameters */
;;;182      assert_param(IS_NVIC_LP(LowPowerMode));
;;;183      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;184      
;;;185      if (NewState != DISABLE)
;;;186      {
;;;187        SCB->SCR |= LowPowerMode;
000002  4a08              LDR      r2,|L4.36|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  f04f23e0          MOV      r3,#0xe000e000
00000c  f8c32d10          STR      r2,[r3,#0xd10]
000010  e006              B        |L4.32|
                  |L4.18|
;;;188      }
;;;189      else
;;;190      {
;;;191        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000012  4a04              LDR      r2,|L4.36|
000014  6812              LDR      r2,[r2,#0]
000016  4382              BICS     r2,r2,r0
000018  f04f23e0          MOV      r3,#0xe000e000
00001c  f8c32d10          STR      r2,[r3,#0xd10]
                  |L4.32|
;;;192      }
;;;193    }
000020  4770              BX       lr
;;;194    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0xe000ed10

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;204      */
;;;205    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  2804              CMP      r0,#4
;;;206    {
;;;207      /* Check the parameters */
;;;208      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;209      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000002  d108              BNE      |L5.22|
;;;210      {
;;;211        SysTick->CTRL |= SysTick_CLKSource_HCLK;
000004  f04f21e0          MOV      r1,#0xe000e000
000008  6909              LDR      r1,[r1,#0x10]
00000a  f0410104          ORR      r1,r1,#4
00000e  f04f22e0          MOV      r2,#0xe000e000
000012  6111              STR      r1,[r2,#0x10]
000014  e007              B        |L5.38|
                  |L5.22|
;;;212      }
;;;213      else
;;;214      {
;;;215        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000016  f04f21e0          MOV      r1,#0xe000e000
00001a  6909              LDR      r1,[r1,#0x10]
00001c  f0210104          BIC      r1,r1,#4
000020  f04f22e0          MOV      r2,#0xe000e000
000024  6111              STR      r1,[r2,#0x10]
                  |L5.38|
;;;216      }
;;;217    }
000026  4770              BX       lr
;;;218    
                          ENDP

