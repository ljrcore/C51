
    一、指令冗余法
    单片机操作时序完全由程序计数器ＰＣ控制，一旦ＰＣ因干扰出现错误，
 程序便脱离正常轨道，出现“乱飞”、改变操作数数值以及将操作数误认为
 操作码等。为了使“乱飞”程序迅速纳入正轨，应该多用单字节指令，并在
 关键地方插入一些空操作指令ＮＯＰ或将有效单字节指令重写，这就叫做指 
 令冗余。
    １． ＮＯＰ指令的使用: 
         在双字节指令或三字节指令之后插入两条ＮＯＰ指令，可保证其后
      的指令不被拆散。在对程序流向起决定作用的指令  
     （如ＲＥＴ、ＡＣＡＬＬ、ＬＪＭＰ、ＪＺ、ＪＮＺ、ＪＣ、ＪＮＣ、
      ＤＪＮＺ等）和对系统状态起决定作用的指令（如ＳＥＴＢ、ＥＡ等）
      之前插入两条ＮＯＰ指令，使“乱飞”程序迅速纳入正轨。
    ２． 重要指令冗余:
      在对程序流向起决定作用的指令（如ＲＥＴ、ＡＣＡＬＬ、ＬＣＡＬＬ
      ＬＪＭＰ、ＪＺ、ＪＮＺ、ＪＣ、ＪＮＣ等）和某些对系统状态起决定
      作用的指令（如ＳＥＴＢ、ＥＡ等）的后面可重复写这些指令，以确保
      这些指令的正确执行。采用冗余法使ＰＣ纳入正轨的条件是：
         跑飞的ＰＣ必须指向程序运行区，并且必须执行到冗余指令。
    二、软件陷阱法
    当乱飞程序进入非程序区或表格区时，无法用冗余指令使程序入轨，此时
 可以编软件陷阱程序，拦截乱飞程序，将其迅速引向一个指定位置， 在那里
 有程序运行出错处理程序，将程序纳入正轨。软件陷阱的形式如下表。
    根据乱飞程序落入陷阱区的位置不同，可选择表中的两种形式之一。
    １． 未使用的中断区。 当未使用的中断因干扰而开放时，在对应的中断
 服务程序中设置软件陷阱，以及时捕捉错误的中断。返回指令用ＲＥＴＩ，
 中断服务程序为：
    ＮＯＰ
    ＮＯＰ
    ＰＯＰ ｄｉｒｅｃｔ１；将原先断点弹出
    ＰＯＰ ｄｉｒｅｃｔ２
    ＰＵＳＨ ００Ｈ ；断点地址改为００００Ｈ
    ＰＵＳＨ ００Ｈ
    ＲＥＴＩ
    说明：ｄｉｒｅｃｔ１、ｄｉｒｅｃｔ２为主程序中未使用的单元。
    ２． 未使用的ＥＰＲＯＭ空间。 ＥＰＲＯＭ的存储空间很少全部用完。
 未用的区域可用０００００２００００Ｈ或０２０２０２０２００００Ｈ填满
 最后一条应为０２００００Ｈ，当乱飞程序进入此区后，便会迅速入轨。
    ３．运行程序区。 将陷阱指令组分散放置在用户程序各模块之间的空余单
 元里。在正常程序中不执行这些指令。乱飞程序一旦落入此区，便迅速拉到正
 确轨道。
    ４． 中断服务程序区。 设用户主程序运行区间为ＡＤＤ１～ＡＤＤ２，
 并设定时器Ｔ０产生１０ｍｓ定时中断。当程序乱飞落入ＡＤＤ１～ＡＤＤ２
 外，并发生了定时中断后，可在中断服务程序中判断中断断点地址ＡＤＤ×，
 若ＡＤＤ×＜ＡＤＤ１或ＡＤＤ×＞ＡＤＤ２，说明发生了程序乱飞，则应使
 程序返回到复位地址００００Ｈ，将乱飞程序拉到正确轨道。
 假设ＡＤＤ１＝０１００Ｈ，ＡＤＤ２＝１０００Ｈ，２ＦＨ、２ＥＨ分别为
 断点地址高、低字节单元，中断服务程序为：
       ＰＯＰ  ２ＦＨ    ；断点地址弹入２ＦＨ、２ＥＨ
       ＰＯＰ  ２ＥＨ
       ＰＵＳＨ ２ＥＨ
       ＰＵＳＨ ２ＦＨ    ；恢复断点地址
       ＣＬＲ  Ｃ       ；断点地址与０１００Ｈ比较
       ＭＯＶ  Ａ，２ＥＨ
       ＳＵＢＢ Ａ，＃００Ｈ
       ＭＯＶ  Ａ，２ＦＨ
       ＳＵＢＢ Ａ，＃０１Ｈ
       ＪＣ    ＬＯＯＰＮ   ；断点小于０１００Ｈ则转
       ＭＯＶ   Ａ，＃００Ｈ ；断点地址与１０００Ｈ比较
       ＳＵＢＢ Ａ，２ＥＨ
       ＭＯＶ   Ａ，＃１０Ｈ
       ＳＵＢＢ Ａ，２ＦＨ
       ＪＣ    ＬＯＯＰＮ ；断点大于１００００Ｈ则转
               ?    ；中断处理内容
               ?    
               ?    
       ＲＥＴＩ         ；正常返回
ＬＯＯＰＮ：ＰＯＰ  ２ＦＨ    ；修改断点地址
       ＰＯＰ  ２ＥＨ
       ＰＵＳＨ ００Ｈ    ；故障断点为００００Ｈ
       ＰＵＳＨ ００Ｈ
       ＲＥＴＩ         ；故障返回
    ５． 外部ＲＡＭ写保护。 单片机外部ＲＡＭ保存大量数据，其写入指令
 为ＭＯＶＸ ＠ＤＰＴＲ，Ａ。当ＣＰＵ受到干扰而非法执行该指令时，  会
 改写ＲＡＭ中的数据。为减小ＲＡＭ中数据丢失的可能性， 可在ＲＡＭ写作
 之前加入条件陷阱，不满足条件时不允许写，并进入陷阱，形成死循环。
 具体程序为：
          ＭＯＶ Ａ，＃××Ｈ
          ＭＯＶ ＤＰＴＲ，＃××××Ｈ
          ＭＯＶ ６ＥＨ，＃５５Ｈ
          ＭＯＶ ６ＦＨ，＃０ＡＡＨ
          ＬＣＡＬＬ ＷＰＤＰＳＵＢ
          ＲＥＴ
 ＷＰＤＰＳＵＢ：ＮＯＰ
          ＮＯＰ
          ＮＯＰ
          ＣＪＮＥ ６ＥＨ，＃５５Ｈ，ＸＹＪ  ；６ＥＨ中不为
                           ；５５Ｈ则落入死循环
          ＣＪＮＥ ６ＦＨ，＃０ＡＡＨ，ＸＹＪ ；６ＦＨ中不为
                           ；ＡＡＨ则落死循环
          ＭＯＶＸ  ＠ＤＰＴＲ，Ａ     ；Ａ中数据写入
                           ；ＲＡＭ××××Ｈ中
          ＮＯＰ
          ＮＯＰ
          ＮＯＰ
          ＭＯＶ ６ＥＨ，＃００Ｈ
          ＭＯＶ ６ＦＨ，＃００Ｈ
          ＲＥＴ
 ＸＹＪ：   ＮＯＰ                  ；死循环
          ＮＯＰ
          ＳＪＭＰ ＸＹＪ
    三、看门狗
    “看门狗”可使程序脱离“死循环”。“看门狗”可由硬件实现，可由软件
  实现，也可由两者结合来实现。软件看门狗的基本思路是：在主程序中对Ｔ０
  中断服务程序进行监视；在Ｔ１中断服务程序中对主程序进行监视；Ｔ０中断
  监视Ｔ１中断。从概率统计的观点，这种相互依存相互制约的抗干扰措施将使
  系统的可靠性大大提高。
    系统软件包括主程序、高级中断子程序和低级中断子程序三部分。假设将T０
  设计成高级中断，Ｔ１设计成低级中断，从而形成中断嵌套。主程序流程图如
  图１所示。主程序完成系统测控功能的同时，还要监视Ｔ０中断因干扰而引起
  的中断关闭故障。Ａ０为Ｔ０中断服务程序运行状态观测单元，Ｔ０每中断一
  次，Ａ０便自动加１。在测控功能模块运行程序（主程序的主体）入口处，先
  将Ａ０值暂存于Ｅ０单元。由于测控功能模块一般运行时间较长，设定在此期
  间Ｔ０产生定时中断（设Ｔ０定时溢出时间小于测控功能模块运行时间），从
  而引起Ａ０变化。在测控功能模块的出口处，将Ａ０的即时值与先前的暂存单
  元Ｅ０的值相比较，观察Ａ０的值是否发生变化。若Ａ０的值发生变化，说明
  Ｔ０中断运行正常；若Ａ０的值没变化，说明Ｔ０中断关闭，则转到００００Ｈ
  处，进行出错处理。
    Ｔ１中断程序流程图如图２所示。Ｔ１中断程序完成系统特定测控功能的同时，
  还要监视主程序的运行状态。在中断服务程序中设置一个主程序运行计数器Ｍ，
  Ｔ１每中断一次，Ｍ自动加１，Ｍ中的数值与Ｔ１定时溢出时间之积表示时间值。
  若Ｍ表示的时间值大于主程序运行时间Ｔ（为可靠起见，Ｔ要留有一定余量），
  说明主程序陷入死循环，Ｔ１中断服务程序便修改断点地址，返回００００Ｈ，
  进行出错处理。若Ｍ小于Ｔ，则中断正常返回，Ｍ在主程序入口处循环清０，如
  图１所示。
    Ｔ０中断程序流程图如图３所示。Ｔ０中断程序监视Ｔ１中断服务程序的运行
  状态。该程序较短，受干扰破坏的几率较小。Ａ１、Ｂ１为中断运行状态标志单
  元。Ａ１的初始值为００Ｈ，Ｔ１每中断一次，Ａ１自动加１。Ｔ０中断程序若
  检测到Ａ１＞０，说明Ｔ１中断程序正常；若Ａ１＝０，则Ｂ１单元加１（Ｂ１
  的初始值为００Ｈ），若Ｂ１的累加值大于Ｑ，说明Ｔ１中断失效，失效时间为
  Ｔ０定时溢出时间与Ｑ值之积。Ｑ值的选取取决于Ｔ１、Ｔ０定时溢出时间。
  例如，Ｔ０定时溢出时间为１０ｍｓ，Ｔ１定时溢出时间为２０ｍｓ，当Ｑ＝４时
  ，说明Ｔ１的允许失效时间为４０ｍｓ，在这样长的时间内，Ｔ１没有发生中断，
  说明Ｔ１中断发生了故障。由于Ｔ０中断级别高于Ｔ１中断，所以Ｔ１的任何中断
  故障（死循环、故障关闭）都会因Ｔ０的中断而被检测出来。
    当系统受到干扰后，主程序可能发生死循环，中断程序也可能发生死循环或因中
  断方式字的破坏而被关闭中断。主程序的死循环可由Ｔ１中断服务程序进行监视；
  Ｔ０中断的故障关闭可由主程序进行监视；Ｔ１中断服务程序的死循环和故障关闭
  可由Ｔ０中断服务程序进行监视。由于采用了多重软件监测方法，大大提高了系统
  运行的可靠性。
    注意：Ｔ０中断服务程序若因干扰而陷入死循环。主程序和Ｔ１中断服务程序无
  法检测出来。因此，应尽量缩短Ｔ０中断服务程序的长度，降低其发生死循环的几
  率。
    硬件看门狗与软件看门狗结合，可获得良好的抗干扰效果。

                                                                    