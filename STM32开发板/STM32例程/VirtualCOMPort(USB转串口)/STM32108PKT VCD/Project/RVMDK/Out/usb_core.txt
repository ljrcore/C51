; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Out\usb_core.o --depend=.\Out\usb_core.d --device=DARMSTM --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Core\CM3 -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I"D:\Program Files\KeilARM350\ARM\INC\ST\STM32F10x" ..\..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_core.c]
                          THUMB

                          AREA ||i.DataStageIn||, CODE, READONLY, ALIGN=2

                  DataStageIn PROC
;;;482    *******************************************************************************/
;;;483    void DataStageIn(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;484    {
;;;485      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
000004  4828              LDR      r0,|L1.168|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  f1000410          ADD      r4,r0,#0x10
;;;486      uint32_t save_wLength = pEPinfo->Usb_wLength;
00000c  8825              LDRH     r5,[r4,#0]
;;;487      uint32_t ControlState = pInformation->ControlState;
00000e  4826              LDR      r0,|L1.168|
000010  6800              LDR      r0,[r0,#0]  ; pInformation
000012  7a06              LDRB     r6,[r0,#8]
;;;488    
;;;489      uint8_t *DataBuffer;
;;;490      uint32_t Length;
;;;491    
;;;492      if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
000014  b9d5              CBNZ     r5,|L1.76|
000016  2e04              CMP      r6,#4
000018  d118              BNE      |L1.76|
;;;493      {
;;;494        if(Data_Mul_MaxPacketSize == TRUE)
00001a  4824              LDR      r0,|L1.172|
00001c  7800              LDRB     r0,[r0,#0]  ; Data_Mul_MaxPacketSize
00001e  2801              CMP      r0,#1
000020  d10f              BNE      |L1.66|
;;;495        {
;;;496          /* No more data to send and empty packet */
;;;497          Send0LengthData();
000022  2100              MOVS     r1,#0
000024  4822              LDR      r0,|L1.176|
000026  6800              LDR      r0,[r0,#0]
000028  b280              UXTH     r0,r0
00002a  1c80              ADDS     r0,r0,#2
00002c  4a21              LDR      r2,|L1.180|
00002e  f8421010          STR      r1,[r2,r0,LSL #1]
000032  2030              MOVS     r0,#0x30
000034  4920              LDR      r1,|L1.184|
000036  8008              STRH     r0,[r1,#0]
;;;498          ControlState = LAST_IN_DATA;
000038  bf00              NOP      
;;;499          Data_Mul_MaxPacketSize = FALSE;
00003a  2000              MOVS     r0,#0
00003c  491b              LDR      r1,|L1.172|
00003e  7008              STRB     r0,[r1,#0]
000040  e003              B        |L1.74|
                  |L1.66|
;;;500        }
;;;501        else 
;;;502        {
;;;503          /* No more data to send so STALL the TX Status*/
;;;504          ControlState = WAIT_STATUS_OUT;
000042  2607              MOVS     r6,#7
;;;505          vSetEPTxStatus(EP_TX_STALL);
000044  2010              MOVS     r0,#0x10
000046  491c              LDR      r1,|L1.184|
000048  8008              STRH     r0,[r1,#0]
                  |L1.74|
;;;506        }
;;;507        
;;;508        goto Expect_Status_Out;
00004a  e027              B        |L1.156|
                  |L1.76|
;;;509      }
;;;510    
;;;511      Length = pEPinfo->PacketSize;
00004c  88a7              LDRH     r7,[r4,#4]
;;;512      ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
00004e  42bd              CMP      r5,r7
000050  d801              BHI      |L1.86|
000052  2004              MOVS     r0,#4
000054  e000              B        |L1.88|
                  |L1.86|
000056  2002              MOVS     r0,#2
                  |L1.88|
000058  4606              MOV      r6,r0
;;;513    
;;;514      if (Length > save_wLength)
00005a  42af              CMP      r7,r5
00005c  d900              BLS      |L1.96|
;;;515      {
;;;516        Length = save_wLength;
00005e  462f              MOV      r7,r5
                  |L1.96|
;;;517      }
;;;518    
;;;519      DataBuffer = (*pEPinfo->CopyData)(Length);
000060  b2b8              UXTH     r0,r7
000062  68a1              LDR      r1,[r4,#8]
000064  4788              BLX      r1
000066  4680              MOV      r8,r0
;;;520    
;;;521      UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       GetEPTxAddr
00006e  4681              MOV      r9,r0
000070  b2ba              UXTH     r2,r7
000072  4601              MOV      r1,r0
000074  4640              MOV      r0,r8
000076  f7fffffe          BL       UserToPMABufferCopy
;;;522    
;;;523      SetEPTxCount(ENDP0, Length);
00007a  b2b9              UXTH     r1,r7
00007c  2000              MOVS     r0,#0
00007e  f7fffffe          BL       SetEPTxCount
;;;524    
;;;525      pEPinfo->Usb_wLength -= Length;
000082  8820              LDRH     r0,[r4,#0]
000084  1bc0              SUBS     r0,r0,r7
000086  8020              STRH     r0,[r4,#0]
;;;526      pEPinfo->Usb_wOffset += Length;
000088  8860              LDRH     r0,[r4,#2]
00008a  4438              ADD      r0,r0,r7
00008c  8060              STRH     r0,[r4,#2]
;;;527      vSetEPTxStatus(EP_TX_VALID);
00008e  2030              MOVS     r0,#0x30
000090  4909              LDR      r1,|L1.184|
000092  8008              STRH     r0,[r1,#0]
;;;528    
;;;529      USB_StatusOut();/* Expect the host to abort the data IN stage */
000094  0200              LSLS     r0,r0,#8
000096  4909              LDR      r1,|L1.188|
000098  8008              STRH     r0,[r1,#0]
;;;530    
;;;531    Expect_Status_Out:
00009a  bf00              NOP      
                  |L1.156|
;;;532      pInformation->ControlState = ControlState;
00009c  4902              LDR      r1,|L1.168|
00009e  6809              LDR      r1,[r1,#0]  ; pInformation
0000a0  720e              STRB     r6,[r1,#8]
;;;533    }
0000a2  e8bd87f0          POP      {r4-r10,pc}
;;;534    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L1.168|
                          DCD      pInformation
                  |L1.172|
                          DCD      Data_Mul_MaxPacketSize
                  |L1.176|
                          DCD      0x40005c50
                  |L1.180|
                          DCD      0x40006000
                  |L1.184|
                          DCD      SaveTState
                  |L1.188|
                          DCD      SaveRState

                          AREA ||i.DataStageOut||, CODE, READONLY, ALIGN=2

                  DataStageOut PROC
;;;425    *******************************************************************************/
;;;426    void DataStageOut(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;427    {
;;;428      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
000004  4828              LDR      r0,|L2.168|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  f1000410          ADD      r4,r0,#0x10
;;;429      uint32_t save_rLength;
;;;430    
;;;431      save_rLength = pEPinfo->Usb_rLength;
00000c  8825              LDRH     r5,[r4,#0]
;;;432    
;;;433      if (pEPinfo->CopyData && save_rLength)
00000e  68a0              LDR      r0,[r4,#8]
000010  b1c0              CBZ      r0,|L2.68|
000012  b1bd              CBZ      r5,|L2.68|
;;;434      {
;;;435        uint8_t *Buffer;
;;;436        uint32_t Length;
;;;437    
;;;438        Length = pEPinfo->PacketSize;
000014  88a6              LDRH     r6,[r4,#4]
;;;439        if (Length > save_rLength)
000016  42ae              CMP      r6,r5
000018  d900              BLS      |L2.28|
;;;440        {
;;;441          Length = save_rLength;
00001a  462e              MOV      r6,r5
                  |L2.28|
;;;442        }
;;;443    
;;;444        Buffer = (*pEPinfo->CopyData)(Length);
00001c  b2b0              UXTH     r0,r6
00001e  68a1              LDR      r1,[r4,#8]
000020  4788              BLX      r1
000022  4607              MOV      r7,r0
;;;445        pEPinfo->Usb_rLength -= Length;
000024  8820              LDRH     r0,[r4,#0]
000026  1b80              SUBS     r0,r0,r6
000028  8020              STRH     r0,[r4,#0]
;;;446        pEPinfo->Usb_rOffset += Length;
00002a  8860              LDRH     r0,[r4,#2]
00002c  4430              ADD      r0,r0,r6
00002e  8060              STRH     r0,[r4,#2]
;;;447    
;;;448        PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       GetEPRxAddr
000036  4680              MOV      r8,r0
000038  b2b2              UXTH     r2,r6
00003a  4601              MOV      r1,r0
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       PMAToUserBufferCopy
;;;449      }
000042  bf00              NOP      
                  |L2.68|
;;;450    
;;;451      if (pEPinfo->Usb_rLength != 0)
000044  8820              LDRH     r0,[r4,#0]
000046  b150              CBZ      r0,|L2.94|
;;;452      {
;;;453        vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
000048  f44f5040          MOV      r0,#0x3000
00004c  4917              LDR      r1,|L2.172|
00004e  8008              STRH     r0,[r1,#0]
;;;454        SetEPTxCount(ENDP0, 0);
000050  2100              MOVS     r1,#0
000052  4608              MOV      r0,r1
000054  f7fffffe          BL       SetEPTxCount
;;;455        vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
000058  2030              MOVS     r0,#0x30
00005a  4915              LDR      r1,|L2.176|
00005c  8008              STRH     r0,[r1,#0]
                  |L2.94|
;;;456      }
;;;457      /* Set the next State*/
;;;458      if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
00005e  8820              LDRH     r0,[r4,#0]
000060  88a1              LDRH     r1,[r4,#4]
000062  4288              CMP      r0,r1
000064  db04              BLT      |L2.112|
;;;459      {
;;;460        pInformation->ControlState = OUT_DATA;
000066  2003              MOVS     r0,#3
000068  490f              LDR      r1,|L2.168|
00006a  6809              LDR      r1,[r1,#0]  ; pInformation
00006c  7208              STRB     r0,[r1,#8]
00006e  e018              B        |L2.162|
                  |L2.112|
;;;461      }
;;;462      else
;;;463      {
;;;464        if (pEPinfo->Usb_rLength > 0)
000070  8820              LDRH     r0,[r4,#0]
000072  2800              CMP      r0,#0
000074  dd04              BLE      |L2.128|
;;;465        {
;;;466          pInformation->ControlState = LAST_OUT_DATA;
000076  2005              MOVS     r0,#5
000078  490b              LDR      r1,|L2.168|
00007a  6809              LDR      r1,[r1,#0]  ; pInformation
00007c  7208              STRB     r0,[r1,#8]
00007e  e010              B        |L2.162|
                  |L2.128|
;;;467        }
;;;468        else if (pEPinfo->Usb_rLength == 0)
000080  8820              LDRH     r0,[r4,#0]
000082  b970              CBNZ     r0,|L2.162|
;;;469        {
;;;470          pInformation->ControlState = WAIT_STATUS_IN;
000084  2006              MOVS     r0,#6
000086  4908              LDR      r1,|L2.168|
000088  6809              LDR      r1,[r1,#0]  ; pInformation
00008a  7208              STRB     r0,[r1,#8]
;;;471          USB_StatusIn();
00008c  2100              MOVS     r1,#0
00008e  4809              LDR      r0,|L2.180|
000090  6800              LDR      r0,[r0,#0]
000092  b280              UXTH     r0,r0
000094  1c80              ADDS     r0,r0,#2
000096  4a08              LDR      r2,|L2.184|
000098  f8421010          STR      r1,[r2,r0,LSL #1]
00009c  2030              MOVS     r0,#0x30
00009e  4904              LDR      r1,|L2.176|
0000a0  8008              STRH     r0,[r1,#0]
                  |L2.162|
;;;472        }
;;;473      }
;;;474    }
0000a2  e8bd81f0          POP      {r4-r8,pc}
;;;475    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      pInformation
                  |L2.172|
                          DCD      SaveRState
                  |L2.176|
                          DCD      SaveTState
                  |L2.180|
                          DCD      0x40005c50
                  |L2.184|
                          DCD      0x40006000

                          AREA ||i.Data_Setup0||, CODE, READONLY, ALIGN=2

                  Data_Setup0 PROC
;;;665    *******************************************************************************/
;;;666    void Data_Setup0(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;667    {
;;;668      uint8_t *(*CopyRoutine)(uint16_t);
;;;669      RESULT Result;
;;;670      uint32_t Request_No = pInformation->USBbRequest;
000004  4899              LDR      r0,|L3.620|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  7846              LDRB     r6,[r0,#1]
;;;671    
;;;672      uint32_t Related_Endpoint, Reserved;
;;;673      uint32_t wOffset, Status;
;;;674    
;;;675    
;;;676    
;;;677      CopyRoutine = NULL;
00000a  2400              MOVS     r4,#0
;;;678      wOffset = 0;
00000c  46a1              MOV      r9,r4
;;;679    
;;;680      if (Request_No == GET_DESCRIPTOR)
00000e  2e06              CMP      r6,#6
000010  d11a              BNE      |L3.72|
;;;681      {
;;;682        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
000012  4896              LDR      r0,|L3.620|
000014  6800              LDR      r0,[r0,#0]  ; pInformation
000016  7800              LDRB     r0,[r0,#0]
000018  f0100f7f          TST      r0,#0x7f
00001c  d113              BNE      |L3.70|
;;;683        {
;;;684          uint8_t wValue1 = pInformation->USBwValue1;
00001e  4993              LDR      r1,|L3.620|
000020  6809              LDR      r1,[r1,#0]  ; pInformation
000022  7888              LDRB     r0,[r1,#2]
;;;685          if (wValue1 == DEVICE_DESCRIPTOR)
000024  2801              CMP      r0,#1
000026  d103              BNE      |L3.48|
;;;686          {
;;;687            CopyRoutine = pProperty->GetDeviceDescriptor;
000028  4991              LDR      r1,|L3.624|
00002a  6809              LDR      r1,[r1,#0]  ; pProperty
00002c  69cc              LDR      r4,[r1,#0x1c]
00002e  e00a              B        |L3.70|
                  |L3.48|
;;;688          }
;;;689          else if (wValue1 == CONFIG_DESCRIPTOR)
000030  2802              CMP      r0,#2
000032  d103              BNE      |L3.60|
;;;690          {
;;;691            CopyRoutine = pProperty->GetConfigDescriptor;
000034  498e              LDR      r1,|L3.624|
000036  6809              LDR      r1,[r1,#0]  ; pProperty
000038  6a0c              LDR      r4,[r1,#0x20]
00003a  e004              B        |L3.70|
                  |L3.60|
;;;692          }
;;;693          else if (wValue1 == STRING_DESCRIPTOR)
00003c  2803              CMP      r0,#3
00003e  d102              BNE      |L3.70|
;;;694          {
;;;695            CopyRoutine = pProperty->GetStringDescriptor;
000040  498b              LDR      r1,|L3.624|
000042  6809              LDR      r1,[r1,#0]  ; pProperty
000044  6a4c              LDR      r4,[r1,#0x24]
                  |L3.70|
;;;696          }  /* End of GET_DESCRIPTOR */
;;;697        }
000046  e094              B        |L3.370|
                  |L3.72|
;;;698      }
;;;699    
;;;700      /*GET STATUS*/
;;;701      else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
000048  2e00              CMP      r6,#0
00004a  d164              BNE      |L3.278|
00004c  4887              LDR      r0,|L3.620|
00004e  6800              LDR      r0,[r0,#0]  ; pInformation
000050  8840              LDRH     r0,[r0,#2]
000052  2800              CMP      r0,#0
000054  d15f              BNE      |L3.278|
;;;702               && (pInformation->USBwLength == 0x0002)
000056  4885              LDR      r0,|L3.620|
000058  6800              LDR      r0,[r0,#0]  ; pInformation
00005a  88c0              LDRH     r0,[r0,#6]
00005c  2802              CMP      r0,#2
00005e  d15a              BNE      |L3.278|
;;;703               && (pInformation->USBwIndex1 == 0))
000060  4882              LDR      r0,|L3.620|
000062  6800              LDR      r0,[r0,#0]  ; pInformation
000064  7900              LDRB     r0,[r0,#4]
000066  2800              CMP      r0,#0
000068  d155              BNE      |L3.278|
;;;704      {
;;;705        /* GET STATUS for Device*/
;;;706        if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
00006a  4880              LDR      r0,|L3.620|
00006c  6800              LDR      r0,[r0,#0]  ; pInformation
00006e  7800              LDRB     r0,[r0,#0]
000070  f0100f7f          TST      r0,#0x7f
000074  d105              BNE      |L3.130|
;;;707            && (pInformation->USBwIndex == 0))
000076  487d              LDR      r0,|L3.620|
000078  6800              LDR      r0,[r0,#0]  ; pInformation
00007a  8880              LDRH     r0,[r0,#4]
00007c  b908              CBNZ     r0,|L3.130|
;;;708        {
;;;709          CopyRoutine = Standard_GetStatus;
00007e  4c7d              LDR      r4,|L3.628|
000080  e077              B        |L3.370|
                  |L3.130|
;;;710        }
;;;711    
;;;712        /* GET STATUS for Interface*/
;;;713        else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
000082  487a              LDR      r0,|L3.620|
000084  6800              LDR      r0,[r0,#0]  ; pInformation
000086  7800              LDRB     r0,[r0,#0]
000088  f000007f          AND      r0,r0,#0x7f
00008c  2801              CMP      r0,#1
00008e  d110              BNE      |L3.178|
;;;714        {
;;;715          if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
000090  4976              LDR      r1,|L3.620|
000092  6809              LDR      r1,[r1,#0]  ; pInformation
000094  7948              LDRB     r0,[r1,#5]
000096  4976              LDR      r1,|L3.624|
000098  6809              LDR      r1,[r1,#0]  ; pProperty
00009a  698a              LDR      r2,[r1,#0x18]
00009c  2100              MOVS     r1,#0
00009e  4790              BLX      r2
0000a0  2800              CMP      r0,#0
0000a2  d166              BNE      |L3.370|
;;;716              && (pInformation->Current_Configuration != 0))
0000a4  4871              LDR      r0,|L3.620|
0000a6  6800              LDR      r0,[r0,#0]  ; pInformation
0000a8  7a80              LDRB     r0,[r0,#0xa]
0000aa  2800              CMP      r0,#0
0000ac  d061              BEQ      |L3.370|
;;;717          {
;;;718            CopyRoutine = Standard_GetStatus;
0000ae  4c71              LDR      r4,|L3.628|
0000b0  e05f              B        |L3.370|
                  |L3.178|
;;;719          }
;;;720        }
;;;721    
;;;722        /* GET STATUS for EndPoint*/
;;;723        else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
0000b2  486e              LDR      r0,|L3.620|
0000b4  6800              LDR      r0,[r0,#0]  ; pInformation
0000b6  7800              LDRB     r0,[r0,#0]
0000b8  f000007f          AND      r0,r0,#0x7f
0000bc  2802              CMP      r0,#2
0000be  d158              BNE      |L3.370|
;;;724        {
;;;725          Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
0000c0  486a              LDR      r0,|L3.620|
0000c2  6800              LDR      r0,[r0,#0]  ; pInformation
0000c4  7940              LDRB     r0,[r0,#5]
0000c6  f000070f          AND      r7,r0,#0xf
;;;726          Reserved = pInformation->USBwIndex0 & 0x70;
0000ca  4868              LDR      r0,|L3.620|
0000cc  6800              LDR      r0,[r0,#0]  ; pInformation
0000ce  7940              LDRB     r0,[r0,#5]
0000d0  f0000870          AND      r8,r0,#0x70
;;;727    
;;;728          if (ValBit(pInformation->USBwIndex0, 7))
0000d4  4865              LDR      r0,|L3.620|
0000d6  6800              LDR      r0,[r0,#0]  ; pInformation
0000d8  7940              LDRB     r0,[r0,#5]
0000da  f0100f80          TST      r0,#0x80
0000de  d007              BEQ      |L3.240|
;;;729          {
;;;730            /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;731            is Disabled*/
;;;732            Status = _GetEPTxStatus(Related_Endpoint);
0000e0  4865              LDR      r0,|L3.632|
0000e2  eb000087          ADD      r0,r0,r7,LSL #2
0000e6  f8d00c00          LDR      r0,[r0,#0xc00]
0000ea  f0000a30          AND      r10,r0,#0x30
0000ee  e006              B        |L3.254|
                  |L3.240|
;;;733          }
;;;734          else
;;;735          {
;;;736            Status = _GetEPRxStatus(Related_Endpoint);
0000f0  4861              LDR      r0,|L3.632|
0000f2  eb000087          ADD      r0,r0,r7,LSL #2
0000f6  f8d00c00          LDR      r0,[r0,#0xc00]
0000fa  f4005a40          AND      r10,r0,#0x3000
                  |L3.254|
;;;737          }
;;;738    
;;;739          if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
0000fe  485f              LDR      r0,|L3.636|
000100  7800              LDRB     r0,[r0,#0]  ; Device_Table
000102  42b8              CMP      r0,r7
000104  d935              BLS      |L3.370|
000106  f1b80f00          CMP      r8,#0
00010a  d132              BNE      |L3.370|
;;;740              && (Status != 0))
00010c  f1ba0f00          CMP      r10,#0
000110  d02f              BEQ      |L3.370|
;;;741          {
;;;742            CopyRoutine = Standard_GetStatus;
000112  4c58              LDR      r4,|L3.628|
000114  e02d              B        |L3.370|
                  |L3.278|
;;;743          }
;;;744        }
;;;745    
;;;746      }
;;;747    
;;;748      /*GET CONFIGURATION*/
;;;749      else if (Request_No == GET_CONFIGURATION)
000116  2e08              CMP      r6,#8
000118  d107              BNE      |L3.298|
;;;750      {
;;;751        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
00011a  4854              LDR      r0,|L3.620|
00011c  6800              LDR      r0,[r0,#0]  ; pInformation
00011e  7800              LDRB     r0,[r0,#0]
000120  f0100f7f          TST      r0,#0x7f
000124  d125              BNE      |L3.370|
;;;752        {
;;;753          CopyRoutine = Standard_GetConfiguration;
000126  4c56              LDR      r4,|L3.640|
000128  e023              B        |L3.370|
                  |L3.298|
;;;754        }
;;;755      }
;;;756      /*GET INTERFACE*/
;;;757      else if (Request_No == GET_INTERFACE)
00012a  2e0a              CMP      r6,#0xa
00012c  d121              BNE      |L3.370|
;;;758      {
;;;759        if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
00012e  484f              LDR      r0,|L3.620|
000130  6800              LDR      r0,[r0,#0]  ; pInformation
000132  7800              LDRB     r0,[r0,#0]
000134  f000007f          AND      r0,r0,#0x7f
000138  2801              CMP      r0,#1
00013a  d11a              BNE      |L3.370|
;;;760            && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
00013c  484b              LDR      r0,|L3.620|
00013e  6800              LDR      r0,[r0,#0]  ; pInformation
000140  7a80              LDRB     r0,[r0,#0xa]
000142  b1b0              CBZ      r0,|L3.370|
000144  4849              LDR      r0,|L3.620|
000146  6800              LDR      r0,[r0,#0]  ; pInformation
000148  8840              LDRH     r0,[r0,#2]
00014a  b990              CBNZ     r0,|L3.370|
;;;761            && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
00014c  4847              LDR      r0,|L3.620|
00014e  6800              LDR      r0,[r0,#0]  ; pInformation
000150  7900              LDRB     r0,[r0,#4]
000152  b970              CBNZ     r0,|L3.370|
000154  4845              LDR      r0,|L3.620|
000156  6800              LDR      r0,[r0,#0]  ; pInformation
000158  88c0              LDRH     r0,[r0,#6]
00015a  2801              CMP      r0,#1
00015c  d109              BNE      |L3.370|
;;;762            && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
00015e  4943              LDR      r1,|L3.620|
000160  6809              LDR      r1,[r1,#0]  ; pInformation
000162  7948              LDRB     r0,[r1,#5]
000164  4942              LDR      r1,|L3.624|
000166  6809              LDR      r1,[r1,#0]  ; pProperty
000168  698a              LDR      r2,[r1,#0x18]
00016a  2100              MOVS     r1,#0
00016c  4790              BLX      r2
00016e  b900              CBNZ     r0,|L3.370|
;;;763        {
;;;764          CopyRoutine = Standard_GetInterface;
000170  4c44              LDR      r4,|L3.644|
                  |L3.370|
;;;765        }
;;;766    
;;;767      }
;;;768      
;;;769      if (CopyRoutine)
000172  b154              CBZ      r4,|L3.394|
;;;770      {
;;;771        pInformation->Ctrl_Info.Usb_wOffset = wOffset;
000174  483d              LDR      r0,|L3.620|
000176  6800              LDR      r0,[r0,#0]  ; pInformation
000178  f8a09012          STRH     r9,[r0,#0x12]
;;;772        pInformation->Ctrl_Info.CopyData = CopyRoutine;
00017c  483b              LDR      r0,|L3.620|
00017e  6800              LDR      r0,[r0,#0]  ; pInformation
000180  6184              STR      r4,[r0,#0x18]
;;;773        /* sb in the original the cast to word was directly */
;;;774        /* now the cast is made step by step */
;;;775        (*CopyRoutine)(0);
000182  2000              MOVS     r0,#0
000184  47a0              BLX      r4
;;;776        Result = USB_SUCCESS;
000186  2500              MOVS     r5,#0
000188  e00f              B        |L3.426|
                  |L3.394|
;;;777      }
;;;778      else
;;;779      {
;;;780        Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
00018a  4a38              LDR      r2,|L3.620|
00018c  6812              LDR      r2,[r2,#0]  ; pInformation
00018e  7850              LDRB     r0,[r2,#1]
000190  4a37              LDR      r2,|L3.624|
000192  6812              LDR      r2,[r2,#0]  ; pProperty
000194  6911              LDR      r1,[r2,#0x10]
000196  4788              BLX      r1
000198  4605              MOV      r5,r0
;;;781        if (Result == USB_NOT_READY)
00019a  2d03              CMP      r5,#3
00019c  d105              BNE      |L3.426|
;;;782        {
;;;783          pInformation->ControlState = PAUSE;
00019e  2009              MOVS     r0,#9
0001a0  4932              LDR      r1,|L3.620|
0001a2  6809              LDR      r1,[r1,#0]  ; pInformation
0001a4  7208              STRB     r0,[r1,#8]
                  |L3.422|
;;;784          return;
;;;785        }
;;;786      }
;;;787    
;;;788      if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
;;;789      {
;;;790        /* Data is not ready, wait it */
;;;791        pInformation->ControlState = PAUSE;
;;;792        return;
;;;793      }
;;;794      if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
;;;795      {
;;;796        /* Unsupported request */
;;;797        pInformation->ControlState = STALLED;
;;;798        return;
;;;799      }
;;;800    
;;;801    
;;;802      if (ValBit(pInformation->USBbmRequestType, 7))
;;;803      {
;;;804        /* Device ==> Host */
;;;805        __IO uint32_t wLength = pInformation->USBwLength;
;;;806         
;;;807        /* Restrict the data length to be the one host asks */
;;;808        if (pInformation->Ctrl_Info.Usb_wLength > wLength)
;;;809        {
;;;810          pInformation->Ctrl_Info.Usb_wLength = wLength;
;;;811        }
;;;812        
;;;813        else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
;;;814        {
;;;815          if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
;;;816          {
;;;817            Data_Mul_MaxPacketSize = FALSE;
;;;818          }
;;;819          else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
;;;820          {
;;;821            Data_Mul_MaxPacketSize = TRUE;
;;;822          }
;;;823        }   
;;;824    
;;;825        pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
;;;826        DataStageIn();
;;;827      }
;;;828      else
;;;829      {
;;;830        pInformation->ControlState = OUT_DATA;
;;;831        vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
;;;832      }
;;;833    
;;;834      return;
;;;835    }
0001a6  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.426|
0001aa  4830              LDR      r0,|L3.620|
0001ac  6800              LDR      r0,[r0,#0]            ;788  ; pInformation
0001ae  8a00              LDRH     r0,[r0,#0x10]         ;788
0001b0  f5a0417f          SUB      r1,r0,#0xff00         ;788
0001b4  39ff              SUBS     r1,r1,#0xff           ;788
0001b6  d104              BNE      |L3.450|
0001b8  2009              MOVS     r0,#9                 ;791
0001ba  492c              LDR      r1,|L3.620|
0001bc  6809              LDR      r1,[r1,#0]            ;791  ; pInformation
0001be  7208              STRB     r0,[r1,#8]            ;791
0001c0  e7f1              B        |L3.422|
                  |L3.450|
0001c2  2d02              CMP      r5,#2                 ;794
0001c4  d003              BEQ      |L3.462|
0001c6  4829              LDR      r0,|L3.620|
0001c8  6800              LDR      r0,[r0,#0]            ;794  ; pInformation
0001ca  8a00              LDRH     r0,[r0,#0x10]         ;794
0001cc  b920              CBNZ     r0,|L3.472|
                  |L3.462|
0001ce  2008              MOVS     r0,#8                 ;797
0001d0  4926              LDR      r1,|L3.620|
0001d2  6809              LDR      r1,[r1,#0]            ;797  ; pInformation
0001d4  7208              STRB     r0,[r1,#8]            ;797
0001d6  e7e6              B        |L3.422|
                  |L3.472|
0001d8  4824              LDR      r0,|L3.620|
0001da  6800              LDR      r0,[r0,#0]            ;802  ; pInformation
0001dc  7800              LDRB     r0,[r0,#0]            ;802
0001de  f0100f80          TST      r0,#0x80              ;802
0001e2  d03b              BEQ      |L3.604|
0001e4  4821              LDR      r0,|L3.620|
0001e6  6800              LDR      r0,[r0,#0]            ;805  ; pInformation
0001e8  f8b0b006          LDRH     r11,[r0,#6]           ;805
0001ec  481f              LDR      r0,|L3.620|
0001ee  6800              LDR      r0,[r0,#0]            ;808  ; pInformation
0001f0  8a00              LDRH     r0,[r0,#0x10]         ;808
0001f2  4558              CMP      r0,r11                ;808
0001f4  d904              BLS      |L3.512|
0001f6  491d              LDR      r1,|L3.620|
0001f8  6809              LDR      r1,[r1,#0]            ;810  ; pInformation
0001fa  f8a1b010          STRH     r11,[r1,#0x10]        ;810
0001fe  e023              B        |L3.584|
                  |L3.512|
000200  481a              LDR      r0,|L3.620|
000202  6800              LDR      r0,[r0,#0]            ;813  ; pInformation
000204  8a00              LDRH     r0,[r0,#0x10]         ;813
000206  4919              LDR      r1,|L3.620|
000208  6809              LDR      r1,[r1,#0]            ;813  ; pInformation
00020a  88c9              LDRH     r1,[r1,#6]            ;813
00020c  4288              CMP      r0,r1                 ;813
00020e  da1b              BGE      |L3.584|
000210  4816              LDR      r0,|L3.620|
000212  6800              LDR      r0,[r0,#0]            ;815  ; pInformation
000214  8a00              LDRH     r0,[r0,#0x10]         ;815
000216  4916              LDR      r1,|L3.624|
000218  6809              LDR      r1,[r1,#0]            ;815  ; pProperty
00021a  f891102c          LDRB     r1,[r1,#0x2c]         ;815
00021e  4288              CMP      r0,r1                 ;815
000220  da03              BGE      |L3.554|
000222  2000              MOVS     r0,#0                 ;817
000224  4918              LDR      r1,|L3.648|
000226  7008              STRB     r0,[r1,#0]            ;817
000228  e00e              B        |L3.584|
                  |L3.554|
00022a  4810              LDR      r0,|L3.620|
00022c  6800              LDR      r0,[r0,#0]            ;819  ; pInformation
00022e  8a00              LDRH     r0,[r0,#0x10]         ;819
000230  490f              LDR      r1,|L3.624|
000232  6809              LDR      r1,[r1,#0]            ;819  ; pProperty
000234  f891102c          LDRB     r1,[r1,#0x2c]         ;819
000238  fb90f2f1          SDIV     r2,r0,r1              ;819
00023c  fb010012          MLS      r0,r1,r2,r0           ;819
000240  b910              CBNZ     r0,|L3.584|
000242  2001              MOVS     r0,#1                 ;821
000244  4910              LDR      r1,|L3.648|
000246  7008              STRB     r0,[r1,#0]            ;821
                  |L3.584|
000248  4809              LDR      r0,|L3.624|
00024a  6800              LDR      r0,[r0,#0]            ;825  ; pProperty
00024c  f890102c          LDRB     r1,[r0,#0x2c]         ;825
000250  4806              LDR      r0,|L3.620|
000252  6800              LDR      r0,[r0,#0]            ;825  ; pInformation
000254  8281              STRH     r1,[r0,#0x14]         ;825
000256  f7fffffe          BL       DataStageIn
00025a  e006              B        |L3.618|
                  |L3.604|
00025c  2003              MOVS     r0,#3                 ;830
00025e  4903              LDR      r1,|L3.620|
000260  6809              LDR      r1,[r1,#0]            ;830  ; pInformation
000262  7208              STRB     r0,[r1,#8]            ;830
000264  0300              LSLS     r0,r0,#12             ;831
000266  4909              LDR      r1,|L3.652|
000268  8008              STRH     r0,[r1,#0]            ;831
                  |L3.618|
00026a  e79c              B        |L3.422|
;;;836    
                          ENDP

                  |L3.620|
                          DCD      pInformation
                  |L3.624|
                          DCD      pProperty
                  |L3.628|
                          DCD      Standard_GetStatus
                  |L3.632|
                          DCD      0x40005000
                  |L3.636|
                          DCD      Device_Table
                  |L3.640|
                          DCD      Standard_GetConfiguration
                  |L3.644|
                          DCD      Standard_GetInterface
                  |L3.648|
                          DCD      Data_Mul_MaxPacketSize
                  |L3.652|
                          DCD      SaveRState

                          AREA ||i.In0_Process||, CODE, READONLY, ALIGN=2

                  In0_Process PROC
;;;887    *******************************************************************************/
;;;888    uint8_t In0_Process(void)
000000  b510              PUSH     {r4,lr}
;;;889    {
;;;890      uint32_t ControlState = pInformation->ControlState;
000002  4818              LDR      r0,|L4.100|
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  7a04              LDRB     r4,[r0,#8]
;;;891    
;;;892      if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
000008  2c02              CMP      r4,#2
00000a  d001              BEQ      |L4.16|
00000c  2c04              CMP      r4,#4
00000e  d105              BNE      |L4.28|
                  |L4.16|
;;;893      {
;;;894        DataStageIn();
000010  f7fffffe          BL       DataStageIn
;;;895        /* ControlState may be changed outside the function */
;;;896        ControlState = pInformation->ControlState;
000014  4813              LDR      r0,|L4.100|
000016  6800              LDR      r0,[r0,#0]  ; pInformation
000018  7a04              LDRB     r4,[r0,#8]
00001a  e01c              B        |L4.86|
                  |L4.28|
;;;897      }
;;;898    
;;;899      else if (ControlState == WAIT_STATUS_IN)
00001c  2c06              CMP      r4,#6
00001e  d119              BNE      |L4.84|
;;;900      {
;;;901        if ((pInformation->USBbRequest == SET_ADDRESS) &&
000020  4810              LDR      r0,|L4.100|
000022  6800              LDR      r0,[r0,#0]  ; pInformation
000024  7840              LDRB     r0,[r0,#1]
000026  2805              CMP      r0,#5
000028  d10e              BNE      |L4.72|
;;;902            (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
00002a  480e              LDR      r0,|L4.100|
00002c  6800              LDR      r0,[r0,#0]  ; pInformation
00002e  7800              LDRB     r0,[r0,#0]
000030  f0100f7f          TST      r0,#0x7f
000034  d108              BNE      |L4.72|
;;;903        {
;;;904          SetDeviceAddress(pInformation->USBwValue0);
000036  490b              LDR      r1,|L4.100|
000038  6809              LDR      r1,[r1,#0]  ; pInformation
00003a  78c8              LDRB     r0,[r1,#3]
00003c  f7fffffe          BL       SetDeviceAddress
;;;905          pUser_Standard_Requests->User_SetDeviceAddress();
000040  4909              LDR      r1,|L4.104|
000042  6809              LDR      r1,[r1,#0]  ; pUser_Standard_Requests
000044  6a08              LDR      r0,[r1,#0x20]
000046  4780              BLX      r0
                  |L4.72|
;;;906        }
;;;907        (*pProperty->Process_Status_IN)();
000048  4908              LDR      r1,|L4.108|
00004a  6809              LDR      r1,[r1,#0]  ; pProperty
00004c  6888              LDR      r0,[r1,#8]
00004e  4780              BLX      r0
;;;908        ControlState = STALLED;
000050  2408              MOVS     r4,#8
000052  e000              B        |L4.86|
                  |L4.84|
;;;909      }
;;;910    
;;;911      else
;;;912      {
;;;913        ControlState = STALLED;
000054  2408              MOVS     r4,#8
                  |L4.86|
;;;914      }
;;;915    
;;;916      pInformation->ControlState = ControlState;
000056  4903              LDR      r1,|L4.100|
000058  6809              LDR      r1,[r1,#0]  ; pInformation
00005a  720c              STRB     r4,[r1,#8]
;;;917    
;;;918      return Post0_Process();
00005c  f7fffffe          BL       Post0_Process
;;;919    }
000060  bd10              POP      {r4,pc}
;;;920    
                          ENDP

000062  0000              DCW      0x0000
                  |L4.100|
                          DCD      pInformation
                  |L4.104|
                          DCD      pUser_Standard_Requests
                  |L4.108|
                          DCD      pProperty

                          AREA ||i.NOP_Process||, CODE, READONLY, ALIGN=1

                  NOP_Process PROC
;;;1008   *******************************************************************************/
;;;1009   void NOP_Process(void)
000000  4770              BX       lr
;;;1010   {
;;;1011   }
;;;1012   
                          ENDP


                          AREA ||i.NoData_Setup0||, CODE, READONLY, ALIGN=2

                  NoData_Setup0 PROC
;;;541    *******************************************************************************/
;;;542    void NoData_Setup0(void)
000000  b570              PUSH     {r4-r6,lr}
;;;543    {
;;;544      RESULT Result = USB_UNSUPPORT;
000002  2402              MOVS     r4,#2
;;;545      uint32_t RequestNo = pInformation->USBbRequest;
000004  4849              LDR      r0,|L6.300|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  7845              LDRB     r5,[r0,#1]
;;;546      uint32_t ControlState;
;;;547    
;;;548      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
00000a  4848              LDR      r0,|L6.300|
00000c  6800              LDR      r0,[r0,#0]  ; pInformation
00000e  7800              LDRB     r0,[r0,#0]
000010  f0100f7f          TST      r0,#0x7f
000014  d14a              BNE      |L6.172|
;;;549      {
;;;550        /* Device Request*/
;;;551        /* SET_CONFIGURATION*/
;;;552        if (RequestNo == SET_CONFIGURATION)
000016  2d09              CMP      r5,#9
000018  d103              BNE      |L6.34|
;;;553        {
;;;554          Result = Standard_SetConfiguration();
00001a  f7fffffe          BL       Standard_SetConfiguration
00001e  4604              MOV      r4,r0
000020  e065              B        |L6.238|
                  |L6.34|
;;;555        }
;;;556    
;;;557        /*SET ADDRESS*/
;;;558        else if (RequestNo == SET_ADDRESS)
000022  2d05              CMP      r5,#5
000024  d114              BNE      |L6.80|
;;;559        {
;;;560          if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
000026  4841              LDR      r0,|L6.300|
000028  6800              LDR      r0,[r0,#0]  ; pInformation
00002a  78c0              LDRB     r0,[r0,#3]
00002c  287f              CMP      r0,#0x7f
00002e  dc0b              BGT      |L6.72|
000030  483e              LDR      r0,|L6.300|
000032  6800              LDR      r0,[r0,#0]  ; pInformation
000034  7880              LDRB     r0,[r0,#2]
000036  b938              CBNZ     r0,|L6.72|
;;;561              || (pInformation->USBwIndex != 0)
000038  483c              LDR      r0,|L6.300|
00003a  6800              LDR      r0,[r0,#0]  ; pInformation
00003c  8880              LDRH     r0,[r0,#4]
00003e  b918              CBNZ     r0,|L6.72|
;;;562              || (pInformation->Current_Configuration != 0))
000040  483a              LDR      r0,|L6.300|
000042  6800              LDR      r0,[r0,#0]  ; pInformation
000044  7a80              LDRB     r0,[r0,#0xa]
000046  b108              CBZ      r0,|L6.76|
                  |L6.72|
;;;563            /* Device Address should be 127 or less*/
;;;564          {
;;;565            ControlState = STALLED;
000048  2608              MOVS     r6,#8
;;;566            goto exit_NoData_Setup0;
00004a  e06b              B        |L6.292|
                  |L6.76|
;;;567          }
;;;568          else
;;;569          {
;;;570            Result = USB_SUCCESS;
00004c  2400              MOVS     r4,#0
00004e  e04e              B        |L6.238|
                  |L6.80|
;;;571          }
;;;572        }
;;;573        /*SET FEATURE for Device*/
;;;574        else if (RequestNo == SET_FEATURE)
000050  2d03              CMP      r5,#3
000052  d114              BNE      |L6.126|
;;;575        {
;;;576          if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
000054  4835              LDR      r0,|L6.300|
000056  6800              LDR      r0,[r0,#0]  ; pInformation
000058  78c0              LDRB     r0,[r0,#3]
00005a  2801              CMP      r0,#1
00005c  d10d              BNE      |L6.122|
;;;577              && (pInformation->USBwIndex == 0)
00005e  4833              LDR      r0,|L6.300|
000060  6800              LDR      r0,[r0,#0]  ; pInformation
000062  8880              LDRH     r0,[r0,#4]
000064  b948              CBNZ     r0,|L6.122|
;;;578              && (ValBit(pInformation->Current_Feature, 5)))
000066  4831              LDR      r0,|L6.300|
000068  6800              LDR      r0,[r0,#0]  ; pInformation
00006a  7a40              LDRB     r0,[r0,#9]
00006c  f0100f20          TST      r0,#0x20
000070  d003              BEQ      |L6.122|
;;;579          {
;;;580            Result = Standard_SetDeviceFeature();
000072  f7fffffe          BL       Standard_SetDeviceFeature
000076  4604              MOV      r4,r0
000078  e039              B        |L6.238|
                  |L6.122|
;;;581          }
;;;582          else
;;;583          {
;;;584            Result = USB_UNSUPPORT;
00007a  2402              MOVS     r4,#2
00007c  e037              B        |L6.238|
                  |L6.126|
;;;585          }
;;;586        }
;;;587        /*Clear FEATURE for Device */
;;;588        else if (RequestNo == CLEAR_FEATURE)
00007e  2d01              CMP      r5,#1
000080  d135              BNE      |L6.238|
;;;589        {
;;;590          if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
000082  482a              LDR      r0,|L6.300|
000084  6800              LDR      r0,[r0,#0]  ; pInformation
000086  78c0              LDRB     r0,[r0,#3]
000088  2801              CMP      r0,#1
00008a  d10d              BNE      |L6.168|
;;;591              && pInformation->USBwIndex == 0
00008c  4827              LDR      r0,|L6.300|
00008e  6800              LDR      r0,[r0,#0]  ; pInformation
000090  8880              LDRH     r0,[r0,#4]
000092  b948              CBNZ     r0,|L6.168|
;;;592              && ValBit(pInformation->Current_Feature, 5))
000094  4825              LDR      r0,|L6.300|
000096  6800              LDR      r0,[r0,#0]  ; pInformation
000098  7a40              LDRB     r0,[r0,#9]
00009a  f0100f20          TST      r0,#0x20
00009e  d003              BEQ      |L6.168|
;;;593          {
;;;594            Result = Standard_ClearFeature();
0000a0  f7fffffe          BL       Standard_ClearFeature
0000a4  4604              MOV      r4,r0
0000a6  e022              B        |L6.238|
                  |L6.168|
;;;595          }
;;;596          else
;;;597          {
;;;598            Result = USB_UNSUPPORT;
0000a8  2402              MOVS     r4,#2
0000aa  e020              B        |L6.238|
                  |L6.172|
;;;599          }
;;;600        }
;;;601    
;;;602      }
;;;603    
;;;604      /* Interface Request*/
;;;605      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
0000ac  481f              LDR      r0,|L6.300|
0000ae  6800              LDR      r0,[r0,#0]  ; pInformation
0000b0  7800              LDRB     r0,[r0,#0]
0000b2  f000007f          AND      r0,r0,#0x7f
0000b6  2801              CMP      r0,#1
0000b8  d105              BNE      |L6.198|
;;;606      {
;;;607        /*SET INTERFACE*/
;;;608        if (RequestNo == SET_INTERFACE)
0000ba  2d0b              CMP      r5,#0xb
0000bc  d117              BNE      |L6.238|
;;;609        {
;;;610          Result = Standard_SetInterface();
0000be  f7fffffe          BL       Standard_SetInterface
0000c2  4604              MOV      r4,r0
0000c4  e013              B        |L6.238|
                  |L6.198|
;;;611        }
;;;612      }
;;;613    
;;;614      /* EndPoint Request*/
;;;615      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
0000c6  4819              LDR      r0,|L6.300|
0000c8  6800              LDR      r0,[r0,#0]  ; pInformation
0000ca  7800              LDRB     r0,[r0,#0]
0000cc  f000007f          AND      r0,r0,#0x7f
0000d0  2802              CMP      r0,#2
0000d2  d10b              BNE      |L6.236|
;;;616      {
;;;617        /*CLEAR FEATURE for EndPoint*/
;;;618        if (RequestNo == CLEAR_FEATURE)
0000d4  2d01              CMP      r5,#1
0000d6  d103              BNE      |L6.224|
;;;619        {
;;;620          Result = Standard_ClearFeature();
0000d8  f7fffffe          BL       Standard_ClearFeature
0000dc  4604              MOV      r4,r0
0000de  e006              B        |L6.238|
                  |L6.224|
;;;621        }
;;;622        /* SET FEATURE for EndPoint*/
;;;623        else if (RequestNo == SET_FEATURE)
0000e0  2d03              CMP      r5,#3
0000e2  d104              BNE      |L6.238|
;;;624        {
;;;625          Result = Standard_SetEndPointFeature();
0000e4  f7fffffe          BL       Standard_SetEndPointFeature
0000e8  4604              MOV      r4,r0
0000ea  e000              B        |L6.238|
                  |L6.236|
;;;626        }
;;;627      }
;;;628      else
;;;629      {
;;;630        Result = USB_UNSUPPORT;
0000ec  2402              MOVS     r4,#2
                  |L6.238|
;;;631      }
;;;632    
;;;633    
;;;634      if (Result != USB_SUCCESS)
0000ee  b14c              CBZ      r4,|L6.260|
;;;635      {
;;;636        Result = (*pProperty->Class_NoData_Setup)(RequestNo);
0000f0  480f              LDR      r0,|L6.304|
0000f2  6800              LDR      r0,[r0,#0]  ; pProperty
0000f4  6941              LDR      r1,[r0,#0x14]
0000f6  b2e8              UXTB     r0,r5
0000f8  4788              BLX      r1
0000fa  4604              MOV      r4,r0
;;;637        if (Result == USB_NOT_READY)
0000fc  2c03              CMP      r4,#3
0000fe  d101              BNE      |L6.260|
;;;638        {
;;;639          ControlState = PAUSE;
000100  2609              MOVS     r6,#9
;;;640          goto exit_NoData_Setup0;
000102  e00f              B        |L6.292|
                  |L6.260|
;;;641        }
;;;642      }
;;;643    
;;;644      if (Result != USB_SUCCESS)
000104  b10c              CBZ      r4,|L6.266|
;;;645      {
;;;646        ControlState = STALLED;
000106  2608              MOVS     r6,#8
;;;647        goto exit_NoData_Setup0;
000108  e00c              B        |L6.292|
                  |L6.266|
;;;648      }
;;;649    
;;;650      ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
00010a  2606              MOVS     r6,#6
;;;651    
;;;652      USB_StatusIn();
00010c  2100              MOVS     r1,#0
00010e  4809              LDR      r0,|L6.308|
000110  6800              LDR      r0,[r0,#0]
000112  b280              UXTH     r0,r0
000114  1c80              ADDS     r0,r0,#2
000116  4a08              LDR      r2,|L6.312|
000118  f8421010          STR      r1,[r2,r0,LSL #1]
00011c  2030              MOVS     r0,#0x30
00011e  4907              LDR      r1,|L6.316|
000120  8008              STRH     r0,[r1,#0]
;;;653    
;;;654    exit_NoData_Setup0:
000122  bf00              NOP      
                  |L6.292|
;;;655      pInformation->ControlState = ControlState;
000124  4901              LDR      r1,|L6.300|
000126  6809              LDR      r1,[r1,#0]  ; pInformation
000128  720e              STRB     r6,[r1,#8]
;;;656      return;
;;;657    }
00012a  bd70              POP      {r4-r6,pc}
;;;658    
                          ENDP

                  |L6.300|
                          DCD      pInformation
                  |L6.304|
                          DCD      pProperty
                  |L6.308|
                          DCD      0x40005c50
                  |L6.312|
                          DCD      0x40006000
                  |L6.316|
                          DCD      SaveTState

                          AREA ||i.Out0_Process||, CODE, READONLY, ALIGN=2

                  Out0_Process PROC
;;;927    *******************************************************************************/
;;;928    uint8_t Out0_Process(void)
000000  b510              PUSH     {r4,lr}
;;;929    {
;;;930      uint32_t ControlState = pInformation->ControlState;
000002  4811              LDR      r0,|L7.72|
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  7a04              LDRB     r4,[r0,#8]
;;;931    
;;;932      if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
000008  2c03              CMP      r4,#3
00000a  d001              BEQ      |L7.16|
00000c  2c05              CMP      r4,#5
00000e  d105              BNE      |L7.28|
                  |L7.16|
;;;933      {
;;;934        DataStageOut();
000010  f7fffffe          BL       DataStageOut
;;;935        ControlState = pInformation->ControlState; /* may be changed outside the function */
000014  480c              LDR      r0,|L7.72|
000016  6800              LDR      r0,[r0,#0]  ; pInformation
000018  7a04              LDRB     r4,[r0,#8]
00001a  e00e              B        |L7.58|
                  |L7.28|
;;;936      }
;;;937    
;;;938      else if (ControlState == WAIT_STATUS_OUT)
00001c  2c07              CMP      r4,#7
00001e  d105              BNE      |L7.44|
;;;939      {
;;;940        (*pProperty->Process_Status_OUT)();
000020  490a              LDR      r1,|L7.76|
000022  6809              LDR      r1,[r1,#0]  ; pProperty
000024  68c8              LDR      r0,[r1,#0xc]
000026  4780              BLX      r0
;;;941        ControlState = STALLED;
000028  2408              MOVS     r4,#8
00002a  e006              B        |L7.58|
                  |L7.44|
;;;942      }
;;;943    
;;;944      else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
00002c  2c02              CMP      r4,#2
00002e  d001              BEQ      |L7.52|
000030  2c04              CMP      r4,#4
000032  d101              BNE      |L7.56|
                  |L7.52|
;;;945      {
;;;946        /* host aborts the transfer before finish */
;;;947        ControlState = STALLED;
000034  2408              MOVS     r4,#8
000036  e000              B        |L7.58|
                  |L7.56|
;;;948      }
;;;949    
;;;950      /* Unexpect state, STALL the endpoint */
;;;951      else
;;;952      {
;;;953        ControlState = STALLED;
000038  2408              MOVS     r4,#8
                  |L7.58|
;;;954      }
;;;955    
;;;956      pInformation->ControlState = ControlState;
00003a  4903              LDR      r1,|L7.72|
00003c  6809              LDR      r1,[r1,#0]  ; pInformation
00003e  720c              STRB     r4,[r1,#8]
;;;957    
;;;958      return Post0_Process();
000040  f7fffffe          BL       Post0_Process
;;;959    }
000044  bd10              POP      {r4,pc}
;;;960    
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      pInformation
                  |L7.76|
                          DCD      pProperty

                          AREA ||i.Post0_Process||, CODE, READONLY, ALIGN=2

                  Post0_Process PROC
;;;968    *******************************************************************************/
;;;969    uint8_t Post0_Process(void)
000000  b510              PUSH     {r4,lr}
;;;970    {
;;;971      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000002  480d              LDR      r0,|L8.56|
000004  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SetEPRxCount
;;;972    
;;;973      if (pInformation->ControlState == STALLED)
00000e  480b              LDR      r0,|L8.60|
000010  6800              LDR      r0,[r0,#0]  ; pInformation
000012  7a00              LDRB     r0,[r0,#8]
000014  2808              CMP      r0,#8
000016  d105              BNE      |L8.36|
;;;974      {
;;;975        vSetEPRxStatus(EP_RX_STALL);
000018  0240              LSLS     r0,r0,#9
00001a  4909              LDR      r1,|L8.64|
00001c  8008              STRH     r0,[r1,#0]
;;;976        vSetEPTxStatus(EP_TX_STALL);
00001e  2010              MOVS     r0,#0x10
000020  4908              LDR      r1,|L8.68|
000022  8008              STRH     r0,[r1,#0]
                  |L8.36|
;;;977      }
;;;978    
;;;979      return (pInformation->ControlState == PAUSE);
000024  4805              LDR      r0,|L8.60|
000026  6800              LDR      r0,[r0,#0]  ; pInformation
000028  7a00              LDRB     r0,[r0,#8]
00002a  2809              CMP      r0,#9
00002c  d101              BNE      |L8.50|
00002e  2001              MOVS     r0,#1
000030  e000              B        |L8.52|
                  |L8.50|
000032  2000              MOVS     r0,#0
                  |L8.52|
000034  b2c0              UXTB     r0,r0
;;;980    }
000036  bd10              POP      {r4,pc}
;;;981    
                          ENDP

                  |L8.56|
                          DCD      Device_Property
                  |L8.60|
                          DCD      pInformation
                  |L8.64|
                          DCD      SaveRState
                  |L8.68|
                          DCD      SaveTState

                          AREA ||i.SetDeviceAddress||, CODE, READONLY, ALIGN=2

                  SetDeviceAddress PROC
;;;988    *******************************************************************************/
;;;989    void SetDeviceAddress(uint8_t Val)
000000  b530              PUSH     {r4,r5,lr}
;;;990    {
;;;991      uint32_t i;
;;;992      uint32_t nEP = Device_Table.Total_Endpoint;
000002  4b0f              LDR      r3,|L9.64|
000004  781a              LDRB     r2,[r3,#0]  ; Device_Table
;;;993    
;;;994      /* set address in every used endpoint */
;;;995      for (i = 0; i < nEP; i++)
000006  2100              MOVS     r1,#0
000008  e012              B        |L9.48|
                  |L9.10|
;;;996      {
;;;997        _SetEPAddress((uint8_t)i, (uint8_t)i);
00000a  b2cb              UXTB     r3,r1
00000c  4c0d              LDR      r4,|L9.68|
00000e  eb040383          ADD      r3,r4,r3,LSL #2
000012  f8d33c00          LDR      r3,[r3,#0xc00]
000016  b29b              UXTH     r3,r3
000018  f648748f          MOV      r4,#0x8f8f
00001c  4023              ANDS     r3,r3,r4
00001e  b2cc              UXTB     r4,r1
000020  4323              ORRS     r3,r3,r4
000022  b2cc              UXTB     r4,r1
000024  4d07              LDR      r5,|L9.68|
000026  eb050484          ADD      r4,r5,r4,LSL #2
00002a  f8c43c00          STR      r3,[r4,#0xc00]
00002e  1c49              ADDS     r1,r1,#1              ;995
                  |L9.48|
000030  4291              CMP      r1,r2                 ;995
000032  d3ea              BCC      |L9.10|
;;;998      } /* for */
;;;999      _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
000034  f0400380          ORR      r3,r0,#0x80
000038  4c03              LDR      r4,|L9.72|
00003a  6023              STR      r3,[r4,#0]
;;;1000   }
00003c  bd30              POP      {r4,r5,pc}
;;;1001   
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
                          DCD      Device_Table
                  |L9.68|
                          DCD      0x40005000
                  |L9.72|
                          DCD      0x40005c4c

                          AREA ||i.Setup0_Process||, CODE, READONLY, ALIGN=2

                  Setup0_Process PROC
;;;843    *******************************************************************************/
;;;844    uint8_t Setup0_Process(void)
000000  b508              PUSH     {r3,lr}
;;;845    {
;;;846    
;;;847      union
;;;848      {
;;;849        uint8_t* b;
;;;850        uint16_t* w;
;;;851      } pBuf;
;;;852    
;;;853      pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
000002  4828              LDR      r0,|L10.164|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  1d00              ADDS     r0,r0,#4
00000a  4927              LDR      r1,|L10.168|
00000c  f8510010          LDR      r0,[r1,r0,LSL #1]
000010  b280              UXTH     r0,r0
000012  eb010040          ADD      r0,r1,r0,LSL #1
000016  9000              STR      r0,[sp,#0]
;;;854    
;;;855      if (pInformation->ControlState != PAUSE)
000018  4824              LDR      r0,|L10.172|
00001a  6800              LDR      r0,[r0,#0]  ; pInformation
00001c  7a00              LDRB     r0,[r0,#8]
00001e  2809              CMP      r0,#9
000020  d02f              BEQ      |L10.130|
;;;856      {
;;;857        pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
000022  9800              LDR      r0,[sp,#0]
000024  7800              LDRB     r0,[r0,#0]
000026  4921              LDR      r1,|L10.172|
000028  6809              LDR      r1,[r1,#0]  ; pInformation
00002a  7008              STRB     r0,[r1,#0]
00002c  9800              LDR      r0,[sp,#0]
00002e  1c40              ADDS     r0,r0,#1
000030  9000              STR      r0,[sp,#0]
;;;858        pInformation->USBbRequest = *pBuf.b++; /* bRequest */
000032  9800              LDR      r0,[sp,#0]
000034  7800              LDRB     r0,[r0,#0]
000036  491d              LDR      r1,|L10.172|
000038  6809              LDR      r1,[r1,#0]  ; pInformation
00003a  7048              STRB     r0,[r1,#1]
00003c  9800              LDR      r0,[sp,#0]
00003e  1c40              ADDS     r0,r0,#1
000040  9000              STR      r0,[sp,#0]
;;;859        pBuf.w++;  /* word not accessed because of 32 bits addressing */
000042  9800              LDR      r0,[sp,#0]
000044  1c80              ADDS     r0,r0,#2
000046  9000              STR      r0,[sp,#0]
;;;860        pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
000048  9900              LDR      r1,[sp,#0]
00004a  f8310b02          LDRH     r0,[r1],#2
00004e  9100              STR      r1,[sp,#0]
000050  f7fffffe          BL       ByteSwap
000054  4915              LDR      r1,|L10.172|
000056  6809              LDR      r1,[r1,#0]  ; pInformation
000058  8048              STRH     r0,[r1,#2]
;;;861        pBuf.w++;  /* word not accessed because of 32 bits addressing */
00005a  9800              LDR      r0,[sp,#0]
00005c  1c80              ADDS     r0,r0,#2
00005e  9000              STR      r0,[sp,#0]
;;;862        pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
000060  9900              LDR      r1,[sp,#0]
000062  f8310b02          LDRH     r0,[r1],#2
000066  9100              STR      r1,[sp,#0]
000068  f7fffffe          BL       ByteSwap
00006c  490f              LDR      r1,|L10.172|
00006e  6809              LDR      r1,[r1,#0]  ; pInformation
000070  8088              STRH     r0,[r1,#4]
;;;863        pBuf.w++;  /* word not accessed because of 32 bits addressing */
000072  9800              LDR      r0,[sp,#0]
000074  1c80              ADDS     r0,r0,#2
000076  9000              STR      r0,[sp,#0]
;;;864        pInformation->USBwLength = *pBuf.w; /* wLength */
000078  9800              LDR      r0,[sp,#0]
00007a  8800              LDRH     r0,[r0,#0]
00007c  490b              LDR      r1,|L10.172|
00007e  6809              LDR      r1,[r1,#0]  ; pInformation
000080  80c8              STRH     r0,[r1,#6]
                  |L10.130|
;;;865      }
;;;866    
;;;867      pInformation->ControlState = SETTING_UP;
000082  2001              MOVS     r0,#1
000084  4909              LDR      r1,|L10.172|
000086  6809              LDR      r1,[r1,#0]  ; pInformation
000088  7208              STRB     r0,[r1,#8]
;;;868      if (pInformation->USBwLength == 0)
00008a  4808              LDR      r0,|L10.172|
00008c  6800              LDR      r0,[r0,#0]  ; pInformation
00008e  88c0              LDRH     r0,[r0,#6]
000090  b910              CBNZ     r0,|L10.152|
;;;869      {
;;;870        /* Setup with no data stage */
;;;871        NoData_Setup0();
000092  f7fffffe          BL       NoData_Setup0
000096  e001              B        |L10.156|
                  |L10.152|
;;;872      }
;;;873      else
;;;874      {
;;;875        /* Setup with data stage */
;;;876        Data_Setup0();
000098  f7fffffe          BL       Data_Setup0
                  |L10.156|
;;;877      }
;;;878      return Post0_Process();
00009c  f7fffffe          BL       Post0_Process
;;;879    }
0000a0  bd08              POP      {r3,pc}
;;;880    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L10.164|
                          DCD      0x40005c50
                  |L10.168|
                          DCD      0x40006000
                  |L10.172|
                          DCD      pInformation

                          AREA ||i.Standard_ClearFeature||, CODE, READONLY, ALIGN=2

                  Standard_ClearFeature PROC
;;;235    *******************************************************************************/
;;;236    RESULT Standard_ClearFeature(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;237    {
;;;238      uint32_t     Type_Rec = Type_Recipient;
000004  484f              LDR      r0,|L11.324|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  7800              LDRB     r0,[r0,#0]
00000a  f000047f          AND      r4,r0,#0x7f
;;;239      uint32_t     Status;
;;;240    
;;;241    
;;;242      if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
00000e  b954              CBNZ     r4,|L11.38|
;;;243      {/*Device Clear Feature*/
;;;244        ClrBit(pInformation->Current_Feature, 5);
000010  484c              LDR      r0,|L11.324|
000012  6800              LDR      r0,[r0,#0]  ; pInformation
000014  7a40              LDRB     r0,[r0,#9]
000016  f00000df          AND      r0,r0,#0xdf
00001a  494a              LDR      r1,|L11.324|
00001c  6809              LDR      r1,[r1,#0]  ; pInformation
00001e  7248              STRB     r0,[r1,#9]
;;;245        return USB_SUCCESS;
000020  2000              MOVS     r0,#0
                  |L11.34|
;;;246      }
;;;247      else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
;;;248      {/*EndPoint Clear Feature*/
;;;249        DEVICE* pDev;
;;;250        uint32_t Related_Endpoint;
;;;251        uint32_t wIndex0;
;;;252        uint32_t rEP;
;;;253    
;;;254        if ((pInformation->USBwValue != ENDPOINT_STALL)
;;;255            || (pInformation->USBwIndex1 != 0))
;;;256        {
;;;257          return USB_UNSUPPORT;
;;;258        }
;;;259    
;;;260        pDev = &Device_Table;
;;;261        wIndex0 = pInformation->USBwIndex0;
;;;262        rEP = wIndex0 & ~0x80;
;;;263        Related_Endpoint = ENDP0 + rEP;
;;;264    
;;;265        if (ValBit(pInformation->USBwIndex0, 7))
;;;266        {
;;;267          /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;268          is Disabled*/
;;;269          Status = _GetEPTxStatus(Related_Endpoint);
;;;270        }
;;;271        else
;;;272        {
;;;273          Status = _GetEPRxStatus(Related_Endpoint);
;;;274        }
;;;275    
;;;276        if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
;;;277            || (pInformation->Current_Configuration == 0))
;;;278        {
;;;279          return USB_UNSUPPORT;
;;;280        }
;;;281    
;;;282    
;;;283        if (wIndex0 & 0x80)
;;;284        {
;;;285          /* IN endpoint */
;;;286          if (_GetTxStallStatus(Related_Endpoint ))
;;;287          {
;;;288            ClearDTOG_TX(Related_Endpoint);
;;;289            SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
;;;290          }
;;;291        }
;;;292        else
;;;293        {
;;;294          /* OUT endpoint */
;;;295          if (_GetRxStallStatus(Related_Endpoint))
;;;296          {
;;;297            if (Related_Endpoint == ENDP0)
;;;298            {
;;;299              /* After clear the STALL, enable the default endpoint receiver */
;;;300              SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
;;;301              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
;;;302            }
;;;303            else
;;;304            {
;;;305              ClearDTOG_RX(Related_Endpoint);
;;;306              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
;;;307            }
;;;308          }
;;;309        }
;;;310        pUser_Standard_Requests->User_ClearFeature();
;;;311        return USB_SUCCESS;
;;;312      }
;;;313    
;;;314      return USB_UNSUPPORT;
;;;315    }
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L11.38|
000026  2c02              CMP      r4,#2                 ;247
000028  d17e              BNE      |L11.296|
00002a  4846              LDR      r0,|L11.324|
00002c  6800              LDR      r0,[r0,#0]            ;254  ; pInformation
00002e  8840              LDRH     r0,[r0,#2]            ;254
000030  b918              CBNZ     r0,|L11.58|
000032  4844              LDR      r0,|L11.324|
000034  6800              LDR      r0,[r0,#0]            ;255  ; pInformation
000036  7900              LDRB     r0,[r0,#4]            ;255
000038  b108              CBZ      r0,|L11.62|
                  |L11.58|
00003a  2002              MOVS     r0,#2                 ;257
00003c  e7f1              B        |L11.34|
                  |L11.62|
00003e  4e42              LDR      r6,|L11.328|
000040  4840              LDR      r0,|L11.324|
000042  6800              LDR      r0,[r0,#0]            ;261  ; pInformation
000044  f8908005          LDRB     r8,[r0,#5]            ;261
000048  f0280980          BIC      r9,r8,#0x80           ;262
00004c  464f              MOV      r7,r9                 ;263
00004e  483d              LDR      r0,|L11.324|
000050  6800              LDR      r0,[r0,#0]            ;265  ; pInformation
000052  7940              LDRB     r0,[r0,#5]            ;265
000054  f0100f80          TST      r0,#0x80              ;265
000058  d007              BEQ      |L11.106|
00005a  483c              LDR      r0,|L11.332|
00005c  eb000087          ADD      r0,r0,r7,LSL #2       ;269
000060  f8d00c00          LDR      r0,[r0,#0xc00]        ;269
000064  f0000530          AND      r5,r0,#0x30           ;269
000068  e006              B        |L11.120|
                  |L11.106|
00006a  4838              LDR      r0,|L11.332|
00006c  eb000087          ADD      r0,r0,r7,LSL #2       ;273
000070  f8d00c00          LDR      r0,[r0,#0xc00]        ;273
000074  f4005540          AND      r5,r0,#0x3000         ;273
                  |L11.120|
000078  7830              LDRB     r0,[r6,#0]            ;276
00007a  4548              CMP      r0,r9                 ;276
00007c  d904              BLS      |L11.136|
00007e  b11d              CBZ      r5,|L11.136|
000080  4830              LDR      r0,|L11.324|
000082  6800              LDR      r0,[r0,#0]            ;277  ; pInformation
000084  7a80              LDRB     r0,[r0,#0xa]          ;277
000086  b908              CBNZ     r0,|L11.140|
                  |L11.136|
000088  2002              MOVS     r0,#2                 ;279
00008a  e7ca              B        |L11.34|
                  |L11.140|
00008c  f0180f80          TST      r8,#0x80              ;283
000090  d010              BEQ      |L11.180|
000092  482e              LDR      r0,|L11.332|
000094  eb000087          ADD      r0,r0,r7,LSL #2       ;286
000098  f8d00c00          LDR      r0,[r0,#0xc00]        ;286
00009c  f0000030          AND      r0,r0,#0x30           ;286
0000a0  2810              CMP      r0,#0x10              ;286
0000a2  d145              BNE      |L11.304|
0000a4  b2f8              UXTB     r0,r7                 ;288
0000a6  f7fffffe          BL       ClearDTOG_TX
0000aa  2130              MOVS     r1,#0x30              ;289
0000ac  b2f8              UXTB     r0,r7                 ;289
0000ae  f7fffffe          BL       SetEPTxStatus
0000b2  e03d              B        |L11.304|
                  |L11.180|
0000b4  4825              LDR      r0,|L11.332|
0000b6  eb000087          ADD      r0,r0,r7,LSL #2       ;295
0000ba  f8d00c00          LDR      r0,[r0,#0xc00]        ;295
0000be  f4005040          AND      r0,r0,#0x3000         ;295
0000c2  f5b05f80          CMP      r0,#0x1000            ;295
0000c6  d133              BNE      |L11.304|
0000c8  b9cf              CBNZ     r7,|L11.254|
0000ca  4821              LDR      r0,|L11.336|
0000cc  f890102c          LDRB     r1,[r0,#0x2c]         ;300  ; Device_Property
0000d0  b2f8              UXTB     r0,r7                 ;300
0000d2  f7fffffe          BL       SetEPRxCount
0000d6  491d              LDR      r1,|L11.332|
0000d8  eb010187          ADD      r1,r1,r7,LSL #2       ;301
0000dc  f8d11c00          LDR      r1,[r1,#0xc00]        ;301
0000e0  b289              UXTH     r1,r1                 ;301
0000e2  f64b728f          MOV      r2,#0xbf8f            ;301
0000e6  ea010002          AND      r0,r1,r2              ;301
0000ea  f4805080          EOR      r0,r0,#0x1000         ;301
0000ee  f4805000          EOR      r0,r0,#0x2000         ;301
0000f2  4916              LDR      r1,|L11.332|
0000f4  eb010187          ADD      r1,r1,r7,LSL #2       ;301
0000f8  f8c10c00          STR      r0,[r1,#0xc00]        ;301
0000fc  e018              B        |L11.304|
                  |L11.254|
0000fe  b2f8              UXTB     r0,r7                 ;305
000100  f7fffffe          BL       ClearDTOG_RX
000104  4911              LDR      r1,|L11.332|
000106  eb010187          ADD      r1,r1,r7,LSL #2       ;306
00010a  f8d11c00          LDR      r1,[r1,#0xc00]        ;306
00010e  b289              UXTH     r1,r1                 ;306
000110  f64b728f          MOV      r2,#0xbf8f            ;306
000114  ea010002          AND      r0,r1,r2              ;306
000118  f4805080          EOR      r0,r0,#0x1000         ;306
00011c  f4805000          EOR      r0,r0,#0x2000         ;306
000120  490a              LDR      r1,|L11.332|
000122  eb010187          ADD      r1,r1,r7,LSL #2       ;306
000126  e000              B        |L11.298|
                  |L11.296|
000128  e008              B        |L11.316|
                  |L11.298|
00012a  f8c10c00          STR      r0,[r1,#0xc00]        ;306
00012e  bf00              NOP                            ;306
                  |L11.304|
000130  4908              LDR      r1,|L11.340|
000132  6809              LDR      r1,[r1,#0]            ;310  ; pUser_Standard_Requests
000134  6948              LDR      r0,[r1,#0x14]         ;310
000136  4780              BLX      r0                    ;310
000138  2000              MOVS     r0,#0                 ;311
00013a  e772              B        |L11.34|
                  |L11.316|
00013c  bf00              NOP                            ;312
00013e  2002              MOVS     r0,#2                 ;314
000140  e76f              B        |L11.34|
;;;316    
                          ENDP

000142  0000              DCW      0x0000
                  |L11.324|
                          DCD      pInformation
                  |L11.328|
                          DCD      Device_Table
                  |L11.332|
                          DCD      0x40005000
                  |L11.336|
                          DCD      Device_Property
                  |L11.340|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_GetConfiguration||, CODE, READONLY, ALIGN=2

                  Standard_GetConfiguration PROC
;;;55     *******************************************************************************/
;;;56     uint8_t *Standard_GetConfiguration(uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58       if (Length == 0)
000004  b92c              CBNZ     r4,|L12.18|
;;;59       {
;;;60         pInformation->Ctrl_Info.Usb_wLength =
000006  2001              MOVS     r0,#1
000008  4906              LDR      r1,|L12.36|
00000a  6809              LDR      r1,[r1,#0]  ; pInformation
00000c  8208              STRH     r0,[r1,#0x10]
;;;61           sizeof(pInformation->Current_Configuration);
;;;62         return 0;
00000e  2000              MOVS     r0,#0
                  |L12.16|
;;;63       }
;;;64       pUser_Standard_Requests->User_GetConfiguration();
;;;65       return (uint8_t *)&pInformation->Current_Configuration;
;;;66     }
000010  bd10              POP      {r4,pc}
                  |L12.18|
000012  4905              LDR      r1,|L12.40|
000014  6809              LDR      r1,[r1,#0]            ;64  ; pUser_Standard_Requests
000016  6808              LDR      r0,[r1,#0]            ;64
000018  4780              BLX      r0                    ;64
00001a  4802              LDR      r0,|L12.36|
00001c  6800              LDR      r0,[r0,#0]            ;65  ; pInformation
00001e  300a              ADDS     r0,r0,#0xa            ;65
000020  e7f6              B        |L12.16|
;;;67     
                          ENDP

000022  0000              DCW      0x0000
                  |L12.36|
                          DCD      pInformation
                  |L12.40|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_GetDescriptorData||, CODE, READONLY, ALIGN=2

                  Standard_GetDescriptorData PROC
;;;404    *******************************************************************************/
;;;405    uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
000000  b510              PUSH     {r4,lr}
;;;406    {
000002  4602              MOV      r2,r0
;;;407      uint32_t  wOffset;
;;;408    
;;;409      wOffset = pInformation->Ctrl_Info.Usb_wOffset;
000004  4806              LDR      r0,|L13.32|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  8a43              LDRH     r3,[r0,#0x12]
;;;410      if (Length == 0)
00000a  b932              CBNZ     r2,|L13.26|
;;;411      {
;;;412        pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
00000c  8888              LDRH     r0,[r1,#4]
00000e  1ac0              SUBS     r0,r0,r3
000010  4c03              LDR      r4,|L13.32|
000012  6824              LDR      r4,[r4,#0]  ; pInformation
000014  8220              STRH     r0,[r4,#0x10]
;;;413        return 0;
000016  2000              MOVS     r0,#0
                  |L13.24|
;;;414      }
;;;415    
;;;416      return pDesc->Descriptor + wOffset;
;;;417    }
000018  bd10              POP      {r4,pc}
                  |L13.26|
00001a  6808              LDR      r0,[r1,#0]            ;416
00001c  4418              ADD      r0,r0,r3              ;416
00001e  e7fb              B        |L13.24|
;;;418    
                          ENDP

                  |L13.32|
                          DCD      pInformation

                          AREA ||i.Standard_GetInterface||, CODE, READONLY, ALIGN=2

                  Standard_GetInterface PROC
;;;101    *******************************************************************************/
;;;102    uint8_t *Standard_GetInterface(uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;103    {
000002  4604              MOV      r4,r0
;;;104      if (Length == 0)
000004  b92c              CBNZ     r4,|L14.18|
;;;105      {
;;;106        pInformation->Ctrl_Info.Usb_wLength =
000006  2001              MOVS     r0,#1
000008  4906              LDR      r1,|L14.36|
00000a  6809              LDR      r1,[r1,#0]  ; pInformation
00000c  8208              STRH     r0,[r1,#0x10]
;;;107          sizeof(pInformation->Current_AlternateSetting);
;;;108        return 0;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;109      }
;;;110      pUser_Standard_Requests->User_GetInterface();
;;;111      return (uint8_t *)&pInformation->Current_AlternateSetting;
;;;112    }
000010  bd10              POP      {r4,pc}
                  |L14.18|
000012  4905              LDR      r1,|L14.40|
000014  6809              LDR      r1,[r1,#0]            ;110  ; pUser_Standard_Requests
000016  6888              LDR      r0,[r1,#8]            ;110
000018  4780              BLX      r0                    ;110
00001a  4802              LDR      r0,|L14.36|
00001c  6800              LDR      r0,[r0,#0]            ;111  ; pInformation
00001e  300c              ADDS     r0,r0,#0xc            ;111
000020  e7f6              B        |L14.16|
;;;113    
                          ENDP

000022  0000              DCW      0x0000
                  |L14.36|
                          DCD      pInformation
                  |L14.40|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_GetStatus||, CODE, READONLY, ALIGN=2

                  Standard_GetStatus PROC
;;;157    *******************************************************************************/
;;;158    uint8_t *Standard_GetStatus(uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;159    {
000002  4604              MOV      r4,r0
;;;160      if (Length == 0)
000004  b92c              CBNZ     r4,|L15.18|
;;;161      {
;;;162        pInformation->Ctrl_Info.Usb_wLength = 2;
000006  2002              MOVS     r0,#2
000008  4935              LDR      r1,|L15.224|
00000a  6809              LDR      r1,[r1,#0]  ; pInformation
00000c  8208              STRH     r0,[r1,#0x10]
;;;163        return 0;
00000e  2000              MOVS     r0,#0
                  |L15.16|
;;;164      }
;;;165    
;;;166      StatusInfo.w = 0;
;;;167      /* Reset Status Information */
;;;168    
;;;169      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;170      {
;;;171        /*Get Device Status */
;;;172        uint8_t Feature = pInformation->Current_Feature;
;;;173    
;;;174        /* Remote Wakeup enabled */
;;;175        if (ValBit(Feature, 5))
;;;176        {
;;;177          SetBit(StatusInfo0, 1);
;;;178        }
;;;179    
;;;180        /* Bus-powered */
;;;181        if (ValBit(Feature, 6))
;;;182        {
;;;183          ClrBit(StatusInfo0, 0);
;;;184        }
;;;185        else /* Self-powered */
;;;186        {
;;;187          SetBit(StatusInfo0, 0);
;;;188        }
;;;189      }
;;;190      /*Interface Status*/
;;;191      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
;;;192      {
;;;193        return (uint8_t *)&StatusInfo;
;;;194      }
;;;195      /*Get EndPoint Status*/
;;;196      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
;;;197      {
;;;198        uint8_t Related_Endpoint;
;;;199        uint8_t wIndex0 = pInformation->USBwIndex0;
;;;200    
;;;201        Related_Endpoint = (wIndex0 & 0x0f);
;;;202        if (ValBit(wIndex0, 7))
;;;203        {
;;;204          /* IN endpoint */
;;;205          if (_GetTxStallStatus(Related_Endpoint))
;;;206          {
;;;207            SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
;;;208          }
;;;209        }
;;;210        else
;;;211        {
;;;212          /* OUT endpoint */
;;;213          if (_GetRxStallStatus(Related_Endpoint))
;;;214          {
;;;215            SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
;;;216          }
;;;217        }
;;;218    
;;;219      }
;;;220      else
;;;221      {
;;;222        return NULL;
;;;223      }
;;;224      pUser_Standard_Requests->User_GetStatus();
;;;225      return (uint8_t *)&StatusInfo;
;;;226    }
000010  bd10              POP      {r4,pc}
                  |L15.18|
000012  2000              MOVS     r0,#0                 ;166
000014  4933              LDR      r1,|L15.228|
000016  8008              STRH     r0,[r1,#0]            ;166
000018  4831              LDR      r0,|L15.224|
00001a  6800              LDR      r0,[r0,#0]            ;169  ; pInformation
00001c  7800              LDRB     r0,[r0,#0]            ;169
00001e  f0100f7f          TST      r0,#0x7f              ;169
000022  d11c              BNE      |L15.94|
000024  492e              LDR      r1,|L15.224|
000026  6809              LDR      r1,[r1,#0]            ;172  ; pInformation
000028  7a48              LDRB     r0,[r1,#9]            ;172
00002a  f0100f20          TST      r0,#0x20              ;175
00002e  d005              BEQ      |L15.60|
000030  492c              LDR      r1,|L15.228|
000032  7809              LDRB     r1,[r1,#0]            ;177  ; StatusInfo
000034  f0410102          ORR      r1,r1,#2              ;177
000038  4a2a              LDR      r2,|L15.228|
00003a  7011              STRB     r1,[r2,#0]            ;177
                  |L15.60|
00003c  f0100f40          TST      r0,#0x40              ;181
000040  d006              BEQ      |L15.80|
000042  4928              LDR      r1,|L15.228|
000044  7809              LDRB     r1,[r1,#0]            ;183  ; StatusInfo
000046  f00101fe          AND      r1,r1,#0xfe           ;183
00004a  4a26              LDR      r2,|L15.228|
00004c  7011              STRB     r1,[r2,#0]            ;183
00004e  e005              B        |L15.92|
                  |L15.80|
000050  4924              LDR      r1,|L15.228|
000052  7809              LDRB     r1,[r1,#0]            ;187  ; StatusInfo
000054  f0410101          ORR      r1,r1,#1              ;187
000058  4a22              LDR      r2,|L15.228|
00005a  7011              STRB     r1,[r2,#0]            ;187
                  |L15.92|
00005c  e03a              B        |L15.212|
                  |L15.94|
00005e  4820              LDR      r0,|L15.224|
000060  6800              LDR      r0,[r0,#0]            ;191  ; pInformation
000062  7800              LDRB     r0,[r0,#0]            ;191
000064  f000007f          AND      r0,r0,#0x7f           ;191
000068  2801              CMP      r0,#1                 ;191
00006a  d101              BNE      |L15.112|
00006c  481d              LDR      r0,|L15.228|
00006e  e7cf              B        |L15.16|
                  |L15.112|
000070  481b              LDR      r0,|L15.224|
000072  6800              LDR      r0,[r0,#0]            ;196  ; pInformation
000074  7800              LDRB     r0,[r0,#0]            ;196
000076  f000007f          AND      r0,r0,#0x7f           ;196
00007a  2802              CMP      r0,#2                 ;196
00007c  d128              BNE      |L15.208|
00007e  4a18              LDR      r2,|L15.224|
000080  6812              LDR      r2,[r2,#0]            ;199  ; pInformation
000082  7951              LDRB     r1,[r2,#5]            ;199
000084  f001000f          AND      r0,r1,#0xf            ;201
000088  f0110f80          TST      r1,#0x80              ;202
00008c  d00f              BEQ      |L15.174|
00008e  4a16              LDR      r2,|L15.232|
000090  eb020280          ADD      r2,r2,r0,LSL #2       ;205
000094  f8d22c00          LDR      r2,[r2,#0xc00]        ;205
000098  f0020230          AND      r2,r2,#0x30           ;205
00009c  2a10              CMP      r2,#0x10              ;205
00009e  d116              BNE      |L15.206|
0000a0  4a10              LDR      r2,|L15.228|
0000a2  7812              LDRB     r2,[r2,#0]            ;207  ; StatusInfo
0000a4  f0420201          ORR      r2,r2,#1              ;207
0000a8  4b0e              LDR      r3,|L15.228|
0000aa  701a              STRB     r2,[r3,#0]            ;207
0000ac  e00f              B        |L15.206|
                  |L15.174|
0000ae  4a0e              LDR      r2,|L15.232|
0000b0  eb020280          ADD      r2,r2,r0,LSL #2       ;213
0000b4  f8d22c00          LDR      r2,[r2,#0xc00]        ;213
0000b8  f4025240          AND      r2,r2,#0x3000         ;213
0000bc  f5b25f80          CMP      r2,#0x1000            ;213
0000c0  d105              BNE      |L15.206|
0000c2  4a08              LDR      r2,|L15.228|
0000c4  7812              LDRB     r2,[r2,#0]            ;215  ; StatusInfo
0000c6  f0420201          ORR      r2,r2,#1              ;215
0000ca  4b06              LDR      r3,|L15.228|
0000cc  701a              STRB     r2,[r3,#0]            ;215
                  |L15.206|
0000ce  e001              B        |L15.212|
                  |L15.208|
0000d0  2000              MOVS     r0,#0                 ;222
0000d2  e79d              B        |L15.16|
                  |L15.212|
0000d4  4905              LDR      r1,|L15.236|
0000d6  6809              LDR      r1,[r1,#0]            ;224  ; pUser_Standard_Requests
0000d8  6908              LDR      r0,[r1,#0x10]         ;224
0000da  4780              BLX      r0                    ;224
0000dc  4801              LDR      r0,|L15.228|
0000de  e797              B        |L15.16|
;;;227    
                          ENDP

                  |L15.224|
                          DCD      pInformation
                  |L15.228|
                          DCD      StatusInfo
                  |L15.232|
                          DCD      0x40005000
                  |L15.236|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetConfiguration||, CODE, READONLY, ALIGN=2

                  Standard_SetConfiguration PROC
;;;76     *******************************************************************************/
;;;77     RESULT Standard_SetConfiguration(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79     
;;;80       if ((pInformation->USBwValue0 <=
000002  480e              LDR      r0,|L16.60|
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  78c0              LDRB     r0,[r0,#3]
000008  490d              LDR      r1,|L16.64|
00000a  7849              LDRB     r1,[r1,#1]  ; Device_Table
00000c  4288              CMP      r0,r1
00000e  dc13              BGT      |L16.56|
;;;81           Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
000010  480a              LDR      r0,|L16.60|
000012  6800              LDR      r0,[r0,#0]  ; pInformation
000014  7880              LDRB     r0,[r0,#2]
000016  b978              CBNZ     r0,|L16.56|
;;;82           && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
000018  4808              LDR      r0,|L16.60|
00001a  6800              LDR      r0,[r0,#0]  ; pInformation
00001c  8880              LDRH     r0,[r0,#4]
00001e  b958              CBNZ     r0,|L16.56|
;;;83       {
;;;84         pInformation->Current_Configuration = pInformation->USBwValue0;
000020  4806              LDR      r0,|L16.60|
000022  6800              LDR      r0,[r0,#0]  ; pInformation
000024  78c0              LDRB     r0,[r0,#3]
000026  4905              LDR      r1,|L16.60|
000028  6809              LDR      r1,[r1,#0]  ; pInformation
00002a  7288              STRB     r0,[r1,#0xa]
;;;85         pUser_Standard_Requests->User_SetConfiguration();
00002c  4905              LDR      r1,|L16.68|
00002e  6809              LDR      r1,[r1,#0]  ; pUser_Standard_Requests
000030  6848              LDR      r0,[r1,#4]
000032  4780              BLX      r0
;;;86         return USB_SUCCESS;
000034  2000              MOVS     r0,#0
                  |L16.54|
;;;87       }
;;;88       else
;;;89       {
;;;90         return USB_UNSUPPORT;
;;;91       }
;;;92     }
000036  bd10              POP      {r4,pc}
                  |L16.56|
000038  2002              MOVS     r0,#2                 ;90
00003a  e7fc              B        |L16.54|
;;;93     
                          ENDP

                  |L16.60|
                          DCD      pInformation
                  |L16.64|
                          DCD      Device_Table
                  |L16.68|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetDeviceFeature||, CODE, READONLY, ALIGN=2

                  Standard_SetDeviceFeature PROC
;;;378    *******************************************************************************/
;;;379    RESULT Standard_SetDeviceFeature(void)
000000  b510              PUSH     {r4,lr}
;;;380    {
;;;381      SetBit(pInformation->Current_Feature, 5);
000002  4807              LDR      r0,|L17.32|
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  7a40              LDRB     r0,[r0,#9]
000008  f0400020          ORR      r0,r0,#0x20
00000c  4904              LDR      r1,|L17.32|
00000e  6809              LDR      r1,[r1,#0]  ; pInformation
000010  7248              STRB     r0,[r1,#9]
;;;382      pUser_Standard_Requests->User_SetDeviceFeature();
000012  4904              LDR      r1,|L17.36|
000014  6809              LDR      r1,[r1,#0]  ; pUser_Standard_Requests
000016  69c8              LDR      r0,[r1,#0x1c]
000018  4780              BLX      r0
;;;383      return USB_SUCCESS;
00001a  2000              MOVS     r0,#0
;;;384    }
00001c  bd10              POP      {r4,pc}
;;;385    
                          ENDP

00001e  0000              DCW      0x0000
                  |L17.32|
                          DCD      pInformation
                  |L17.36|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetEndPointFeature||, CODE, READONLY, ALIGN=2

                  Standard_SetEndPointFeature PROC
;;;324    *******************************************************************************/
;;;325    RESULT Standard_SetEndPointFeature(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;326    {
;;;327      uint32_t    wIndex0;
;;;328      uint32_t    Related_Endpoint;
;;;329      uint32_t    rEP;
;;;330      uint32_t   Status;
;;;331    
;;;332      wIndex0 = pInformation->USBwIndex0;
000004  482c              LDR      r0,|L18.184|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  7944              LDRB     r4,[r0,#5]
;;;333      rEP = wIndex0 & ~0x80;
00000a  f0240680          BIC      r6,r4,#0x80
;;;334      Related_Endpoint = ENDP0 + rEP;
00000e  4635              MOV      r5,r6
;;;335    
;;;336      if (ValBit(pInformation->USBwIndex0, 7))
000010  4829              LDR      r0,|L18.184|
000012  6800              LDR      r0,[r0,#0]  ; pInformation
000014  7940              LDRB     r0,[r0,#5]
000016  f0100f80          TST      r0,#0x80
00001a  d007              BEQ      |L18.44|
;;;337      {
;;;338        /* get Status of endpoint & stall the request if the related_ENdpoint
;;;339        is Disabled*/
;;;340        Status = _GetEPTxStatus(Related_Endpoint);
00001c  4827              LDR      r0,|L18.188|
00001e  eb000085          ADD      r0,r0,r5,LSL #2
000022  f8d00c00          LDR      r0,[r0,#0xc00]
000026  f0000730          AND      r7,r0,#0x30
00002a  e006              B        |L18.58|
                  |L18.44|
;;;341      }
;;;342      else
;;;343      {
;;;344        Status = _GetEPRxStatus(Related_Endpoint);
00002c  4823              LDR      r0,|L18.188|
00002e  eb000085          ADD      r0,r0,r5,LSL #2
000032  f8d00c00          LDR      r0,[r0,#0xc00]
000036  f4005740          AND      r7,r0,#0x3000
                  |L18.58|
;;;345      }
;;;346    
;;;347      if (Related_Endpoint >= Device_Table.Total_Endpoint
00003a  4821              LDR      r0,|L18.192|
00003c  7800              LDRB     r0,[r0,#0]  ; Device_Table
00003e  42a8              CMP      r0,r5
000040  d908              BLS      |L18.84|
;;;348          || pInformation->USBwValue != 0 || Status == 0
000042  481d              LDR      r0,|L18.184|
000044  6800              LDR      r0,[r0,#0]  ; pInformation
000046  8840              LDRH     r0,[r0,#2]
000048  b920              CBNZ     r0,|L18.84|
00004a  b11f              CBZ      r7,|L18.84|
;;;349          || pInformation->Current_Configuration == 0)
00004c  481a              LDR      r0,|L18.184|
00004e  6800              LDR      r0,[r0,#0]  ; pInformation
000050  7a80              LDRB     r0,[r0,#0xa]
000052  b910              CBNZ     r0,|L18.90|
                  |L18.84|
;;;350      {
;;;351        return USB_UNSUPPORT;
000054  2002              MOVS     r0,#2
                  |L18.86|
;;;352      }
;;;353      else
;;;354      {
;;;355        if (wIndex0 & 0x80)
;;;356        {
;;;357          /* IN endpoint */
;;;358          _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
;;;359        }
;;;360    
;;;361        else
;;;362        {
;;;363          /* OUT endpoint */
;;;364          _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
;;;365        }
;;;366      }
;;;367      pUser_Standard_Requests->User_SetEndPointFeature();
;;;368      return USB_SUCCESS;
;;;369    }
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L18.90|
00005a  f0140f80          TST      r4,#0x80              ;355
00005e  d012              BEQ      |L18.134|
000060  4916              LDR      r1,|L18.188|
000062  eb010185          ADD      r1,r1,r5,LSL #2       ;358
000066  f8d11c00          LDR      r1,[r1,#0xc00]        ;358
00006a  b289              UXTH     r1,r1                 ;358
00006c  f64872bf          MOV      r2,#0x8fbf            ;358
000070  ea010002          AND      r0,r1,r2              ;358
000074  f0800010          EOR      r0,r0,#0x10           ;358
000078  bf00              NOP                            ;358
00007a  4910              LDR      r1,|L18.188|
00007c  eb010185          ADD      r1,r1,r5,LSL #2       ;358
000080  f8c10c00          STR      r0,[r1,#0xc00]        ;358
000084  e012              B        |L18.172|
                  |L18.134|
000086  490d              LDR      r1,|L18.188|
000088  eb010185          ADD      r1,r1,r5,LSL #2       ;364
00008c  f8d11c00          LDR      r1,[r1,#0xc00]        ;364
000090  b289              UXTH     r1,r1                 ;364
000092  f64b728f          MOV      r2,#0xbf8f            ;364
000096  ea010002          AND      r0,r1,r2              ;364
00009a  f4805080          EOR      r0,r0,#0x1000         ;364
00009e  bf00              NOP                            ;364
0000a0  4906              LDR      r1,|L18.188|
0000a2  eb010185          ADD      r1,r1,r5,LSL #2       ;364
0000a6  f8c10c00          STR      r0,[r1,#0xc00]        ;364
0000aa  bf00              NOP                            ;364
                  |L18.172|
0000ac  4905              LDR      r1,|L18.196|
0000ae  6809              LDR      r1,[r1,#0]            ;367  ; pUser_Standard_Requests
0000b0  6988              LDR      r0,[r1,#0x18]         ;367
0000b2  4780              BLX      r0                    ;367
0000b4  2000              MOVS     r0,#0                 ;368
0000b6  e7ce              B        |L18.86|
;;;370    
                          ENDP

                  |L18.184|
                          DCD      pInformation
                  |L18.188|
                          DCD      0x40005000
                  |L18.192|
                          DCD      Device_Table
                  |L18.196|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetInterface||, CODE, READONLY, ALIGN=2

                  Standard_SetInterface PROC
;;;122    *******************************************************************************/
;;;123    RESULT Standard_SetInterface(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125      RESULT Re;
;;;126      /*Test if the specified Interface and Alternate Setting are supported by
;;;127        the application Firmware*/
;;;128      Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
000002  4b17              LDR      r3,|L19.96|
000004  681b              LDR      r3,[r3,#0]  ; pInformation
000006  78d9              LDRB     r1,[r3,#3]
000008  4b15              LDR      r3,|L19.96|
00000a  681b              LDR      r3,[r3,#0]  ; pInformation
00000c  7958              LDRB     r0,[r3,#5]
00000e  4b15              LDR      r3,|L19.100|
000010  681b              LDR      r3,[r3,#0]  ; pProperty
000012  699a              LDR      r2,[r3,#0x18]
000014  4790              BLX      r2
000016  4604              MOV      r4,r0
;;;129    
;;;130      if (pInformation->Current_Configuration != 0)
000018  4811              LDR      r0,|L19.96|
00001a  6800              LDR      r0,[r0,#0]  ; pInformation
00001c  7a80              LDRB     r0,[r0,#0xa]
00001e  b1e8              CBZ      r0,|L19.92|
;;;131      {
;;;132        if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
000020  b93c              CBNZ     r4,|L19.50|
000022  480f              LDR      r0,|L19.96|
000024  6800              LDR      r0,[r0,#0]  ; pInformation
000026  7900              LDRB     r0,[r0,#4]
000028  b918              CBNZ     r0,|L19.50|
;;;133            || (pInformation->USBwValue1 != 0))
00002a  480d              LDR      r0,|L19.96|
00002c  6800              LDR      r0,[r0,#0]  ; pInformation
00002e  7880              LDRB     r0,[r0,#2]
000030  b108              CBZ      r0,|L19.54|
                  |L19.50|
;;;134        {
;;;135          return  USB_UNSUPPORT;
000032  2002              MOVS     r0,#2
                  |L19.52|
;;;136        }
;;;137        else if (Re == USB_SUCCESS)
;;;138        {
;;;139          pUser_Standard_Requests->User_SetInterface();
;;;140          pInformation->Current_Interface = pInformation->USBwIndex0;
;;;141          pInformation->Current_AlternateSetting = pInformation->USBwValue0;
;;;142          return USB_SUCCESS;
;;;143        }
;;;144    
;;;145      }
;;;146    
;;;147      return USB_UNSUPPORT;
;;;148    }
000034  bd10              POP      {r4,pc}
                  |L19.54|
000036  b98c              CBNZ     r4,|L19.92|
000038  490b              LDR      r1,|L19.104|
00003a  6809              LDR      r1,[r1,#0]            ;139  ; pUser_Standard_Requests
00003c  68c8              LDR      r0,[r1,#0xc]          ;139
00003e  4780              BLX      r0                    ;139
000040  4807              LDR      r0,|L19.96|
000042  6800              LDR      r0,[r0,#0]            ;140  ; pInformation
000044  7940              LDRB     r0,[r0,#5]            ;140
000046  4906              LDR      r1,|L19.96|
000048  6809              LDR      r1,[r1,#0]            ;140  ; pInformation
00004a  72c8              STRB     r0,[r1,#0xb]          ;140
00004c  4804              LDR      r0,|L19.96|
00004e  6800              LDR      r0,[r0,#0]            ;141  ; pInformation
000050  78c0              LDRB     r0,[r0,#3]            ;141
000052  4903              LDR      r1,|L19.96|
000054  6809              LDR      r1,[r1,#0]            ;141  ; pInformation
000056  7308              STRB     r0,[r1,#0xc]          ;141
000058  2000              MOVS     r0,#0                 ;142
00005a  e7eb              B        |L19.52|
                  |L19.92|
00005c  2002              MOVS     r0,#2                 ;147
00005e  e7e9              B        |L19.52|
;;;149    
                          ENDP

                  |L19.96|
                          DCD      pInformation
                  |L19.100|
                          DCD      pProperty
                  |L19.104|
                          DCD      pUser_Standard_Requests

                          AREA ||.data||, DATA, ALIGN=1

                  Data_Mul_MaxPacketSize
000000  0000              DCB      0x00,0x00
                  StatusInfo
000002  0000              DCB      0x00,0x00
