; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Out\usb_pwr.o --depend=.\Out\usb_pwr.d --device=DARMSTM --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Core\CM3 -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I"D:\Program Files\KeilARM350\ARM\INC\ST\STM32F10x" ..\src\usb_pwr.c]
                          THUMB

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;78     *******************************************************************************/
;;;79     RESULT PowerOff()
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81     
;;;82       /* disable all ints and force USB reset */
;;;83       _SetCNTR(CNTR_FRES);
000002  2001              MOVS     r0,#1
000004  4906              LDR      r1,|L1.32|
000006  6008              STR      r0,[r1,#0]
;;;84       /* clear interrupt status register */
;;;85       _SetISTR(0);
000008  2000              MOVS     r0,#0
00000a  4906              LDR      r1,|L1.36|
00000c  f8c10c44          STR      r0,[r1,#0xc44]
;;;86       /* Disable the Pull-Up*/
;;;87       USB_Cable_Config(DISABLE);  
000010  f7fffffe          BL       USB_Cable_Config
;;;88       /* switch-off device */
;;;89       _SetCNTR(CNTR_FRES + CNTR_PDWN);
000014  2003              MOVS     r0,#3
000016  4902              LDR      r1,|L1.32|
000018  6008              STR      r0,[r1,#0]
;;;90       /* sw variables reset */
;;;91       /* ... */
;;;92     
;;;93       return USB_SUCCESS;
00001a  2000              MOVS     r0,#0
;;;94     }
00001c  bd10              POP      {r4,pc}
;;;95     
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x40005c40
                  |L1.36|
                          DCD      0x40005000

                          AREA ||i.PowerOn||, CODE, READONLY, ALIGN=2

                  PowerOn PROC
;;;48     *******************************************************************************/
;;;49     RESULT PowerOn(void)
000000  b510              PUSH     {r4,lr}
;;;50     {
;;;51       uint16_t wRegVal;
;;;52     
;;;53       /*** cable plugged-in ? ***/
;;;54       USB_Cable_Config(ENABLE);  
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       USB_Cable_Config
;;;55       
;;;56       /*** CNTR_PWDN = 0 ***/
;;;57       wRegVal = CNTR_FRES;
000008  2401              MOVS     r4,#1
;;;58       _SetCNTR(wRegVal);
00000a  480c              LDR      r0,|L2.60|
00000c  6004              STR      r4,[r0,#0]
;;;59     
;;;60       /*** CNTR_FRES = 0 ***/
;;;61       wInterrupt_Mask = 0;
00000e  2000              MOVS     r0,#0
000010  490b              LDR      r1,|L2.64|
000012  8008              STRH     r0,[r1,#0]
;;;62       _SetCNTR(wInterrupt_Mask);
000014  4608              MOV      r0,r1
000016  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
000018  490a              LDR      r1,|L2.68|
00001a  f8c10c40          STR      r0,[r1,#0xc40]
;;;63       /*** Clear pending interrupts ***/
;;;64       _SetISTR(0);
00001e  2000              MOVS     r0,#0
000020  4906              LDR      r1,|L2.60|
000022  1d09              ADDS     r1,r1,#4
000024  6008              STR      r0,[r1,#0]
;;;65       /*** Set interrupt mask ***/
;;;66       wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
000026  f44f50e0          MOV      r0,#0x1c00
00002a  4905              LDR      r1,|L2.64|
00002c  8008              STRH     r0,[r1,#0]
;;;67       _SetCNTR(wInterrupt_Mask);
00002e  4608              MOV      r0,r1
000030  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
000032  4904              LDR      r1,|L2.68|
000034  f8c10c40          STR      r0,[r1,#0xc40]
;;;68     
;;;69       return USB_SUCCESS;
000038  2000              MOVS     r0,#0
;;;70     }
00003a  bd10              POP      {r4,pc}
;;;71     
                          ENDP

                  |L2.60|
                          DCD      0x40005c40
                  |L2.64|
                          DCD      wInterrupt_Mask
                  |L2.68|
                          DCD      0x40005000

                          AREA ||i.Resume||, CODE, READONLY, ALIGN=2

                  Resume PROC
;;;172    *******************************************************************************/
;;;173    void Resume(RESUME_STATE eResumeSetVal)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
000002  4604              MOV      r4,r0
;;;175      uint16_t wCNTR;
;;;176    
;;;177      if (eResumeSetVal != RESUME_ESOF)
000004  2c07              CMP      r4,#7
000006  d001              BEQ      |L3.12|
;;;178        ResumeS.eState = eResumeSetVal;
000008  4828              LDR      r0,|L3.172|
00000a  7004              STRB     r4,[r0,#0]
                  |L3.12|
;;;179    
;;;180      switch (ResumeS.eState)
00000c  4827              LDR      r0,|L3.172|
00000e  7800              LDRB     r0,[r0,#0]  ; ResumeS
000010  2808              CMP      r0,#8
000012  d243              BCS      |L3.156|
000014  e8dff000          TBB      [pc,r0]
000018  040a1016          DCB      0x04,0x0a,0x10,0x16
00001c  212f4344          DCB      0x21,0x2f,0x43,0x44
;;;181      {
;;;182        case RESUME_EXTERNAL:
;;;183          Resume_Init();
000020  f7fffffe          BL       Resume_Init
;;;184          ResumeS.eState = RESUME_OFF;
000024  2006              MOVS     r0,#6
000026  4921              LDR      r1,|L3.172|
000028  7008              STRB     r0,[r1,#0]
;;;185          break;
00002a  e03d              B        |L3.168|
;;;186        case RESUME_INTERNAL:
;;;187          Resume_Init();
00002c  f7fffffe          BL       Resume_Init
;;;188          ResumeS.eState = RESUME_START;
000030  2004              MOVS     r0,#4
000032  491e              LDR      r1,|L3.172|
000034  7008              STRB     r0,[r1,#0]
;;;189          break;
000036  e037              B        |L3.168|
;;;190        case RESUME_LATER:
;;;191          ResumeS.bESOFcnt = 2;
000038  2002              MOVS     r0,#2
00003a  491c              LDR      r1,|L3.172|
00003c  7048              STRB     r0,[r1,#1]
;;;192          ResumeS.eState = RESUME_WAIT;
00003e  2003              MOVS     r0,#3
000040  7008              STRB     r0,[r1,#0]
;;;193          break;
000042  e031              B        |L3.168|
;;;194        case RESUME_WAIT:
;;;195          ResumeS.bESOFcnt--;
000044  4819              LDR      r0,|L3.172|
000046  7840              LDRB     r0,[r0,#1]  ; ResumeS
000048  1e40              SUBS     r0,r0,#1
00004a  4918              LDR      r1,|L3.172|
00004c  7048              STRB     r0,[r1,#1]
;;;196          if (ResumeS.bESOFcnt == 0)
00004e  4608              MOV      r0,r1
000050  7840              LDRB     r0,[r0,#1]  ; ResumeS
000052  b908              CBNZ     r0,|L3.88|
;;;197            ResumeS.eState = RESUME_START;
000054  2004              MOVS     r0,#4
000056  7008              STRB     r0,[r1,#0]
                  |L3.88|
;;;198          break;
000058  e026              B        |L3.168|
;;;199        case RESUME_START:
;;;200          wCNTR = _GetCNTR();
00005a  4815              LDR      r0,|L3.176|
00005c  6800              LDR      r0,[r0,#0]
00005e  b285              UXTH     r5,r0
;;;201          wCNTR |= CNTR_RESUME;
000060  f0450510          ORR      r5,r5,#0x10
;;;202          _SetCNTR(wCNTR);
000064  4813              LDR      r0,|L3.180|
000066  f8c05c40          STR      r5,[r0,#0xc40]
;;;203          ResumeS.eState = RESUME_ON;
00006a  2005              MOVS     r0,#5
00006c  490f              LDR      r1,|L3.172|
00006e  7008              STRB     r0,[r1,#0]
;;;204          ResumeS.bESOFcnt = 10;
000070  200a              MOVS     r0,#0xa
000072  7048              STRB     r0,[r1,#1]
;;;205          break;
000074  e018              B        |L3.168|
;;;206        case RESUME_ON:
;;;207          ResumeS.bESOFcnt--;
000076  480d              LDR      r0,|L3.172|
000078  7840              LDRB     r0,[r0,#1]  ; ResumeS
00007a  1e40              SUBS     r0,r0,#1
00007c  490b              LDR      r1,|L3.172|
00007e  7048              STRB     r0,[r1,#1]
;;;208          if (ResumeS.bESOFcnt == 0)
000080  4608              MOV      r0,r1
000082  7840              LDRB     r0,[r0,#1]  ; ResumeS
000084  b948              CBNZ     r0,|L3.154|
;;;209          {
;;;210            wCNTR = _GetCNTR();
000086  480a              LDR      r0,|L3.176|
000088  6800              LDR      r0,[r0,#0]
00008a  b285              UXTH     r5,r0
;;;211            wCNTR &= (~CNTR_RESUME);
00008c  f0250510          BIC      r5,r5,#0x10
;;;212            _SetCNTR(wCNTR);
000090  4808              LDR      r0,|L3.180|
000092  f8c05c40          STR      r5,[r0,#0xc40]
;;;213            ResumeS.eState = RESUME_OFF;
000096  2006              MOVS     r0,#6
000098  7008              STRB     r0,[r1,#0]
                  |L3.154|
;;;214          }
;;;215          break;
00009a  e005              B        |L3.168|
                  |L3.156|
;;;216        case RESUME_OFF:
00009c  bf00              NOP      
;;;217        case RESUME_ESOF:
00009e  bf00              NOP      
;;;218        default:
;;;219          ResumeS.eState = RESUME_OFF;
0000a0  2006              MOVS     r0,#6
0000a2  4902              LDR      r1,|L3.172|
0000a4  7008              STRB     r0,[r1,#0]
;;;220          break;
0000a6  bf00              NOP      
                  |L3.168|
0000a8  bf00              NOP                            ;185
;;;221      }
;;;222    }
0000aa  bd70              POP      {r4-r6,pc}
;;;223    
                          ENDP

                  |L3.172|
                          DCD      ResumeS
                  |L3.176|
                          DCD      0x40005c40
                  |L3.180|
                          DCD      0x40005000

                          AREA ||i.Resume_Init||, CODE, READONLY, ALIGN=2

                  Resume_Init PROC
;;;136    *******************************************************************************/
;;;137    void Resume_Init(void)
000000  b510              PUSH     {r4,lr}
;;;138    {
;;;139      uint16_t wCNTR;
;;;140      /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
;;;141      /* restart the clocks */
;;;142      /* ...  */
;;;143    
;;;144      /* CNTR_LPMODE = 0 */
;;;145      wCNTR = _GetCNTR();
000002  4807              LDR      r0,|L4.32|
000004  6800              LDR      r0,[r0,#0]
000006  b284              UXTH     r4,r0
;;;146      wCNTR &= (~CNTR_LPMODE);
000008  f0240404          BIC      r4,r4,#4
;;;147      _SetCNTR(wCNTR);
00000c  4805              LDR      r0,|L4.36|
00000e  f8c04c40          STR      r4,[r0,#0xc40]
;;;148    
;;;149      /* restore full power */
;;;150      /* ... on connected devices */
;;;151      Leave_LowPowerMode();
000012  f7fffffe          BL       Leave_LowPowerMode
;;;152    
;;;153      /* reset FSUSP bit */
;;;154      _SetCNTR(IMR_MSK);
000016  f44f4006          MOV      r0,#0x8600
00001a  4901              LDR      r1,|L4.32|
00001c  6008              STR      r0,[r1,#0]
;;;155    
;;;156      /* reverse suspend preparation */
;;;157      /* ... */
;;;158    
;;;159    }
00001e  bd10              POP      {r4,pc}
;;;160    
                          ENDP

                  |L4.32|
                          DCD      0x40005c40
                  |L4.36|
                          DCD      0x40005000

                          AREA ||i.Suspend||, CODE, READONLY, ALIGN=2

                  Suspend PROC
;;;102    *******************************************************************************/
;;;103    void Suspend(void)
000000  b510              PUSH     {r4,lr}
;;;104    {
;;;105      uint16_t wCNTR;
;;;106      /* suspend preparation */
;;;107      /* ... */
;;;108    
;;;109      /* macrocell enters suspend mode */
;;;110      wCNTR = _GetCNTR();
000002  4809              LDR      r0,|L5.40|
000004  6800              LDR      r0,[r0,#0]
000006  b284              UXTH     r4,r0
;;;111      wCNTR |= CNTR_FSUSP;
000008  f0440408          ORR      r4,r4,#8
;;;112      _SetCNTR(wCNTR);
00000c  4807              LDR      r0,|L5.44|
00000e  f8c04c40          STR      r4,[r0,#0xc40]
;;;113    
;;;114      /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
;;;115      /* power reduction */
;;;116      /* ... on connected devices */
;;;117    
;;;118    
;;;119      /* force low-power mode in the macrocell */
;;;120      wCNTR = _GetCNTR();
000012  4805              LDR      r0,|L5.40|
000014  6800              LDR      r0,[r0,#0]
000016  b284              UXTH     r4,r0
;;;121      wCNTR |= CNTR_LPMODE;
000018  f0440404          ORR      r4,r4,#4
;;;122      _SetCNTR(wCNTR);
00001c  4803              LDR      r0,|L5.44|
00001e  f8c04c40          STR      r4,[r0,#0xc40]
;;;123    
;;;124      /* switch-off the clocks */
;;;125      /* ... */
;;;126      Enter_LowPowerMode();
000022  f7fffffe          BL       Enter_LowPowerMode
;;;127    
;;;128    }
000026  bd10              POP      {r4,pc}
;;;129    
                          ENDP

                  |L5.40|
                          DCD      0x40005c40
                  |L5.44|
                          DCD      0x40005000

                          AREA ||.data||, DATA, ALIGN=2

                  bDeviceState
                          DCD      0x00000000
                  fSuspendEnabled
000004  01                DCB      0x01
                  ResumeS
000005  0000              DCB      0x00,0x00
