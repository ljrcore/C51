; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Out\usb_endp.o --depend=.\Out\usb_endp.d --device=DARMSTM --apcs=interwork -O0 -I..\inc -I..\..\..\Libraries\CMSIS\Core\CM3 -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I"D:\Program Files\KeilARM350\ARM\INC\ST\STM32F10x" ..\src\usb_endp.c]
                          THUMB

                          AREA ||i.EP1_IN_Callback||, CODE, READONLY, ALIGN=2

                  EP1_IN_Callback PROC
;;;52     *******************************************************************************/
;;;53     void EP1_IN_Callback(void)
000000  b570              PUSH     {r4-r6,lr}
;;;54     {
;;;55       unsigned char *ptemp;
;;;56       unsigned int temp1;
;;;57         switch (usart_2_usb_process)
000002  4826              LDR      r0,|L1.156|
000004  7800              LDRB     r0,[r0,#0]  ; usart_2_usb_process
000006  b120              CBZ      r0,|L1.18|
000008  2801              CMP      r0,#1
00000a  d003              BEQ      |L1.20|
00000c  2802              CMP      r0,#2
00000e  d141              BNE      |L1.148|
000010  e001              B        |L1.22|
                  |L1.18|
;;;58         {
;;;59           case USART_RECEIVE:
;;;60             break;
000012  e040              B        |L1.150|
                  |L1.20|
;;;61           case START_USART2USB:
;;;62             break;
000014  e03f              B        |L1.150|
                  |L1.22|
;;;63           case WAIT_USART2USB_END:
;;;64             if (usart_2_usb_count == 0){
000016  4822              LDR      r0,|L1.160|
000018  8800              LDRH     r0,[r0,#0]  ; usart_2_usb_count
00001a  b918              CBNZ     r0,|L1.36|
;;;65               usart_2_usb_complete = TRUE;
00001c  2001              MOVS     r0,#1
00001e  4921              LDR      r1,|L1.164|
000020  7008              STRB     r0,[r1,#0]
000022  e036              B        |L1.146|
                  |L1.36|
;;;66             }
;;;67             else {
;;;68               if (usart_2_usb_count > VIRTUAL_COM_PORT_DATA_SIZE){
000024  481e              LDR      r0,|L1.160|
000026  8800              LDRH     r0,[r0,#0]  ; usart_2_usb_count
000028  2840              CMP      r0,#0x40
00002a  dd18              BLE      |L1.94|
;;;69                 ptemp = pbuffer_in_usb;
00002c  481e              LDR      r0,|L1.168|
00002e  6805              LDR      r5,[r0,#0]  ; pbuffer_in_usb
;;;70                 UserToPMABufferCopy(ptemp, ENDP1_TXADDR, VIRTUAL_COM_PORT_DATA_SIZE);
000030  2240              MOVS     r2,#0x40
000032  21c0              MOVS     r1,#0xc0
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       UserToPMABufferCopy
;;;71                 SetEPTxCount(ENDP1, VIRTUAL_COM_PORT_DATA_SIZE);
00003a  2140              MOVS     r1,#0x40
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       SetEPTxCount
;;;72                 usart_2_usb_count -= VIRTUAL_COM_PORT_DATA_SIZE;
000042  4817              LDR      r0,|L1.160|
000044  8800              LDRH     r0,[r0,#0]  ; usart_2_usb_count
000046  3840              SUBS     r0,r0,#0x40
000048  4915              LDR      r1,|L1.160|
00004a  8008              STRH     r0,[r1,#0]
;;;73                 pbuffer_in_usb += VIRTUAL_COM_PORT_DATA_SIZE;
00004c  4816              LDR      r0,|L1.168|
00004e  6800              LDR      r0,[r0,#0]  ; pbuffer_in_usb
000050  3040              ADDS     r0,r0,#0x40
000052  4915              LDR      r1,|L1.168|
000054  6008              STR      r0,[r1,#0]  ; pbuffer_in_usb
;;;74                 SetEPTxValid(ENDP1); 
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       SetEPTxValid
00005c  e019              B        |L1.146|
                  |L1.94|
;;;75               }
;;;76               else {
;;;77                 ptemp = pbuffer_in_usb;
00005e  4812              LDR      r0,|L1.168|
000060  6805              LDR      r5,[r0,#0]  ; pbuffer_in_usb
;;;78                 UserToPMABufferCopy(ptemp, ENDP1_TXADDR, usart_2_usb_count);
000062  480f              LDR      r0,|L1.160|
000064  8802              LDRH     r2,[r0,#0]  ; usart_2_usb_count
000066  21c0              MOVS     r1,#0xc0
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       UserToPMABufferCopy
;;;79                 SetEPTxCount(ENDP1, usart_2_usb_count);
00006e  480c              LDR      r0,|L1.160|
000070  8801              LDRH     r1,[r0,#0]  ; usart_2_usb_count
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       SetEPTxCount
;;;80                 temp1 = (unsigned int)usart_2_usb_count;
000078  4809              LDR      r0,|L1.160|
00007a  8804              LDRH     r4,[r0,#0]  ; usart_2_usb_count
;;;81                 pbuffer_in_usb += temp1;
00007c  480a              LDR      r0,|L1.168|
00007e  6800              LDR      r0,[r0,#0]  ; pbuffer_in_usb
000080  4420              ADD      r0,r0,r4
000082  4909              LDR      r1,|L1.168|
000084  6008              STR      r0,[r1,#0]  ; pbuffer_in_usb
;;;82                 usart_2_usb_count = 0;    
000086  2000              MOVS     r0,#0
000088  4905              LDR      r1,|L1.160|
00008a  8008              STRH     r0,[r1,#0]
;;;83                 SetEPTxValid(ENDP1); 
00008c  2001              MOVS     r0,#1
00008e  f7fffffe          BL       SetEPTxValid
                  |L1.146|
;;;84               }
;;;85             }
;;;86             break;
000092  e000              B        |L1.150|
                  |L1.148|
;;;87           default:
;;;88             break;
000094  bf00              NOP      
                  |L1.150|
000096  bf00              NOP                            ;60
;;;89         }
;;;90     }
000098  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP

00009a  0000              DCW      0x0000
                  |L1.156|
                          DCD      usart_2_usb_process
                  |L1.160|
                          DCD      usart_2_usb_count
                  |L1.164|
                          DCD      usart_2_usb_complete
                  |L1.168|
                          DCD      pbuffer_in_usb

                          AREA ||i.EP3_OUT_Callback||, CODE, READONLY, ALIGN=2

                  EP3_OUT_Callback PROC
;;;37     *******************************************************************************/
;;;38     void EP3_OUT_Callback(void)
000000  b510              PUSH     {r4,lr}
;;;39     {
;;;40       count_out = GetEPRxCount(ENDP3);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       GetEPRxCount
000008  4909              LDR      r1,|L2.48|
00000a  6008              STR      r0,[r1,#0]  ; count_out
;;;41       PMAToUserBufferCopy(buffer_out, ENDP3_RXADDR, count_out);
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]  ; count_out
000010  b282              UXTH     r2,r0
000012  f44f7188          MOV      r1,#0x110
000016  4807              LDR      r0,|L2.52|
000018  f7fffffe          BL       PMAToUserBufferCopy
;;;42       pbuffer_out_usart = buffer_out;
00001c  4805              LDR      r0,|L2.52|
00001e  4906              LDR      r1,|L2.56|
000020  6008              STR      r0,[r1,#0]  ; pbuffer_out_usart
;;;43       USART_ITConfig(USART1, USART_IT_TXE, ENABLE);    
000022  2201              MOVS     r2,#1
000024  f2407127          MOV      r1,#0x727
000028  4804              LDR      r0,|L2.60|
00002a  f7fffffe          BL       USART_ITConfig
;;;44     }
00002e  bd10              POP      {r4,pc}
;;;45     
                          ENDP

                  |L2.48|
                          DCD      count_out
                  |L2.52|
                          DCD      buffer_out
                  |L2.56|
                          DCD      pbuffer_out_usart
                  |L2.60|
                          DCD      0x40013800

                          AREA ||.data||, DATA, ALIGN=2

                  count_out
                          DCD      0x00000000
